<?xml version="1.0" encoding="UTF-8"?>
<!-- OSCAL CATALOG METASCHEMA -->
<!-- validate with XSD and Schematron (linked) -->
<?xml-model href="../../build/metaschema/lib/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/xsl" href="metaschema-browser.xsl"?>
<?xml-stylesheet type="text/css" href="../../build/metaschema/lib/metaschema-author.css"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../build/metaschema/lib/metaschema.xsd"
 xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0" xmlns:o="http://csrc.nist.gov/ns/oscal/1.0"
 root="VALIDATION_root">

  <schema-name>OSCAL Document Metadata Description</schema-name>
  <short-name>oscal-metadata</short-name>
  <namespace>http://csrc.nist.gov/ns/oscal/metadata/1.0/</namespace>
  
  <define-assembly name="VALIDATION_root">
    <formal-name>(nominal root)</formal-name>
    <description>NOT TO BE USED IN A METASCHEMA</description>
    <remarks>
      <p>This declaration provides a point of entry for validating the metaschema module standalone.</p>
    </remarks>
    <model>
      <assembly named="metadata"/>
      <assembly named="citation-list"/>
      <assembly named="resource"/>
    </model>
  </define-assembly>
  
  <define-assembly name="metadata">
    <formal-name>Publication metadata</formal-name>
    <description>Information describing the publication or availability of this document</description>
    <model>
      <field      named="title"    required="yes"/>
      <fields     named="author"/>
      <field      named="last-modified-date"/>
      <field      named="version"/>
      <fields     named="doc-id"/>
      <fields     named="prop"/>
      <fields     named="link"/>
      <assemblies named="role"/>
      <assemblies named="party"/>
      <assembly   named="notes"/>
      <assembly   named="extra-meta"/>
    </model>
  </define-assembly>

  <define-field name="link" group-as="links" as="mixed">
    <flag name="href" datatype="anyURI" required="yes"/>
    <flag name="rel" datatype="NCName"/>
    <flag name="media-type" datatype="string"/>
    <formal-name>Link</formal-name>
    <description>
      A line or paragraph with a hypertext link
    </description>
    <remarks>
      <p>Works like an HTML anchor (<code>a</code>) except this is a line-oriented (block)
        element.</p>
      <p>TO DO: need to address link/hlink relations to support hashes.</p>
    </remarks>
  </define-field>
    
  <define-field name="author" group-as="authors">
    <formal-name>Author</formal-name>
    <description>A named author</description>
    <remarks><p>Note this information may be duplicative of information given in a <code>party</code>
    element with appropriate <code>role-id</code> flags, along with more a more complete structured
    listing. This element provides a value for display as well as an additional point of comparison.</p></remarks>
  </define-field>
  
  
  <define-field name="last-modified-date">
    <formal-name>Last modified date</formal-name>
    <description>Date of last modification</description>
    <remarks>
      <p>This value represents the point in time when the OSCAL document was last updated. The date value should be in an ISO 8601 format with full time and time zone indicated. Ordinarily
      the value should be machine generated at time of creation or modification.</p>
      <p>In some cases, an OSCAL document may be derived from some source material in a different format. In such a case, the last-modified-date value should indicate the modification time of the OSCAL document, not the source material.</p>
    </remarks>
  </define-field>

  <define-field name="version">
    <formal-name>version</formal-name>
    <description>Document version</description>
    <remarks><p>A string indicating version, by release number, date, or other identifier.</p></remarks>
  </define-field>

  <define-field name="doc-id" group-as="document-ids">
    <flag name="type" required="yes"/>
    <formal-name>Document Identifier</formal-name>
    <description>Any sort of document identifier, name, code, path or other indicator of where and how this document
      may be located, compared or validated. Given appropriate qualification via its <code>type</code> and <code>rel</code>, this value may point to <q>the same</q> or <q>another version</q> of the document.</description>
    <remarks>
      <p>DOIs (digital object identifiers) are preferred. By means of a DOI or other document ID
      lookup, a full bibliographic record for an item should be retrievable.</p>
      <p>Flags <code>rel</code> and <code>type</code> can qualify the kind and use of document identifier, in particular whether the value is to be attributed to the given instance, or to another instance, source or resource.</p>
      <p>Specific usage rules, nomenclatures and recognized file types e.g. DOIs, CMS locators, etc
        etc., may be defined at application level. The value of this field may also be a hash or check sum.</p>
    </remarks>
  </define-field>

  <define-flag name="type" datatype="string">
    <formal-name>Type</formal-name>
    <description>Indicating the type of identifier, address, email or other data item.</description>
    <remarks><p>Generally, this flag is used to relate to schemes and taxonomies defined outside the OSCAL application in some public form; i.e. they can be looked up. The values may be constrained to a locally defined list.</p></remarks>
  </define-flag>

  <define-field name="prop" group-as="properties">
    <flag name="id" datatype="ID"/>
    <flag name="name" required="yes"/>
    <flag name="ns"/>
    <flag name="class"/>
    <formal-name>Property</formal-name>
    <description>A value with a name, attributed to the containing control, subcontrol, part,
      or group.</description>
    <remarks>
      <p>Properties permit the deployment and management of arbitrary controlled values, with and among control objects (controls, parts, and extensions), for any purpose useful to an application or implementation of those controls. Typically, properties will be used to sort, select, order, and arrange controls or relate them to one another or to class hierarchies, taxonomies, or external authorities.</p>
      <p>The value of a property is a
        simple scalar value or list of values.</p>
      <p>The lexical composition of properties may be constrained by declarations including matching
        to regular expressions or by declaring a known datatype.</p>
      <p>Because properties are often used as selectors or identifiers for OSCAL operations, their
        values can be expected frequently to be normalized (e.g., with respect to whitespace) in
        use; however, this is application defined.</p>
      <p>For singletons (that is, the only element among siblings with its <code>class</code>),
        properties are especially useful as proxies (unique identifiers) for their controls, such
        that controls may be returned one for one on queries for properties (name and value). The
        robustness of such queries can be ensured by appropriate property declarations (as
        singletons and as identifiers); cf <code>declare-prop</code> in the declarations model
        (which also supports other constraints over property values).</p>
    </remarks>
  </define-field>
  
  <define-flag name="name" datatype="string">
    <formal-name>Name</formal-name>
    <description>Identifying the purpose and intended use of the property, part or other object.</description>
    <remarks><p>This flag is intended to be used as a control point for validation of properties and parts
      with respect to constraints related to local semantics. A name is not necessarily expected to be unique,
      even within the scope of the parent (containing) structure -- while if it is (given local application semantics), such uniqueness should be validable.</p>
      <p>The definition of a name is subject to its namespace, offered by an <code>ns</code> flag (q.v.). When <code>ns</code> is not given, the namespace is assumed to be <q>oscal</q> and the name should be one of the recognized values for names
      in OSCAL.</p></remarks>
  </define-flag>
  
  <define-flag name="ns" datatype="string">
    <formal-name>Namespace</formal-name>
    <description>A namespace qualifying the name.</description>
    <remarks>
      <p>Identifies an organization or compliance regime defining the information needs (requirements) addressed by
      an object. When this attribute is not given, its value should be assumed to be <code>oscal</code> and the name should be a name defined by this specification.</p>
    </remarks>
  </define-flag>
  
  <define-flag name="class" datatype="NMTOKENS">
    <formal-name>Class</formal-name>
    <description>Indicating the type or classification of a property, part or other
      object</description>
    <remarks>
      <p>Extra constraints, expressed as validation rules, may be applied to items based on the
        assigned <code>class</code>.</p>
      <p>Some objects where this flag appears also permit a <code>name</code> to be assigned,
        providing more rigor in validation.</p>
    </remarks>
  </define-flag>
  
  <define-assembly name="party" group-as="parties">
    <flag name="id" datatype="ID"/>
    <flag name="role-id"/>
    <formal-name>Party (organization or person)</formal-name>
    <description>A responsible entity, either singular (an organization or person) or collective (multiple persons)</description>
    <remarks>
      <p>As contents one of <code>org</code> or <code>person</code> is required, or both; there may be only one <code>org</code>, but many <code>person</code>s.</p>
      <p>Note that persons can also be indicated with organizational affiliations by using
        <code>orgname</code> inside <code>person</code>. Contact information in that
        case belongs to the person, not the organization: use <code>org</code> when an
      organization as such serves as a documented party.</p>
    </remarks>
    <model>
      <assemblies named="person"/>
      <assembly named="org"/>
      <assembly named="notes"/>
    </model>
  </define-assembly>
  
  <define-assembly name="person" group-as="persons">
    <formal-name>Person</formal-name>
    <description>A person, with contact information</description>
    <model>
      <field    named="person-name"/>
      <field    named="short-name"/>
      <field    named="org-name">
        <description>Affiliated organization</description>
      </field>
      <fields     named="person-id"/>
      <fields     named="org-id"/>
      <assemblies named="address"/>
      <fields     named="email"/>
      <fields     named="phone"/>
      <fields     named="url"/>
      <assembly   named="notes"/>
    </model>
  </define-assembly>
  
  <define-assembly name="org">
    <formal-name>Organization</formal-name>
    <description>An organization or legal entity (not a person), with contact information</description>
    <model>
      <field      named="org-name"/>
      <field      named="short-name"/>
      <fields     named="org-id"/>
      <assemblies named="address"/>
      <fields     named="email"/>
      <fields     named="phone"/>
      <fields     named="url"/>
      <assembly   named="notes"/>
    </model>
  </define-assembly>
  
  <define-field name="person-id" group-as="person-ids">
    <flag name="type"/>
    <formal-name>Personal Identifier</formal-name>
    <description>An identifier for a person (such as an ORCID) using a designated scheme.</description>
  </define-field>
  
  <define-field name="org-id" group-as="organization-ids">
    <flag name="type"/>
    <formal-name>Organization Identifier</formal-name>
    <description>An identifier for an organization using a designated scheme.</description>
  </define-field>
  
  <define-assembly name="rlink" group-as="rlinks">
    <flag name="href" datatype="anyURI" required="yes"/>
    <flag name="media-type"/>
    <formal-name>Related link</formal-name>
    <description>A pointer to an external copy of a document with optional hash for verification</description>
    <remarks>
      <p>This is different from unstructured <code>link</code>, which makes no provision for a hash or formal title. It is also different from the element of the same name once proposed for HTML.</p>
    </remarks>
    <model>
      <field named="hash"/>
    </model>
  </define-assembly>
  
  <define-flag name="rel" datatype="NCName">
    <formal-name>Relation</formal-name>
    <description>Purpose of the link</description>
    <remarks>
      <p>TO DO: discuss IANA link relation registry.</p>
    </remarks>
  </define-flag>
  
  <define-flag name="media-type" datatype="string">
    <formal-name>Media type</formal-name>
    <description>Describes the media type of a linked resource</description>
    <remarks>
      <p>TO DO: discuss IANA media type registry.</p>
    </remarks>
  </define-flag>
  
  <define-field name="person-name">
    <formal-name>Person Name</formal-name>
    <description>Full (legal) name of an individual</description>
  </define-field>
  
  <define-field name="org-name">
    <formal-name>Organization Name</formal-name>
    <description>Full (legal) name of an organization</description>
    <remarks>
      <p>Only when this element is used directly within <code>org</code> can it be accepted of the name of the thing to which it is attached. This element may also be used directly on <code>person</code> to name an affiliated organization.</p>
      <p><code>href</code> can be used to provide external links or internal links to other elements. The sibling <code>org-id</code> element
        (similarly for <em>affiliated</em> organizations) can also be used to link (for example to organizations listed elsewhere as parties.)</p>
    </remarks>
  </define-field>
  
  <define-field name="short-name">
    <formal-name>short-name</formal-name>
    <description>A common name, short name or acronym</description>
    <remarks>
      <p>This element is not expected to be used to identify individual persons, but rather an
        organization or system.</p>
    </remarks>
  </define-field>

  <define-assembly name="address" group-as="addresses">
    <flag name="type"/>
    <formal-name>Address</formal-name>
    <description>A postal address</description>
    <model>
      <fields named="addr-line"/>
      <field  named="city"/>
      <field  named="state"/>
      <field  named="postal-code"/>
      <field  named="country"/>
      <!-- More address stuff -->
    </model>
  </define-assembly>


  <define-field name="addr-line" group-as="postal-address">
    <formal-name>Address line</formal-name>
    <description>A single line of an address</description>
  </define-field>

  <define-field name="city">
    <formal-name>City</formal-name>
    <description>City, town or geographical region for mailing address</description>
  </define-field>

  <define-field name="state">
    <formal-name>State</formal-name>
    <description>State, province or analogous geographical region for mailing address</description>
  </define-field>

  <define-field name="postal-code">
    <formal-name>Postal Code</formal-name>
    <description>Postal or ZIP code for mailing address</description>
  </define-field>

  <define-field name="country">
    <formal-name>Country</formal-name>
    <description>Country for mailing address</description>
  </define-field>

  <define-field name="email" group-as="email-addresses">
    <flag name="type"/>
    <formal-name>Email</formal-name>
    <description>Email address</description>
  </define-field>

  <define-field name="phone" group-as="telephone-numbers">
    <flag name="type"/>
    <formal-name>Telephone</formal-name>
    <description>Contact number by telephone</description>
  </define-field>

  <define-field name="url" group-as="URLs">
    <flag name="type"/>
    <formal-name>URL</formal-name>
    <description>URL for web site or Internet presence</description>
  </define-field>

  <define-assembly name="notes">
    <flag name="type"/>
    <formal-name>Notes</formal-name>
    <description>Any notes with further information</description>
    <model>
      <prose/>
    </model>
  </define-assembly>

  <define-field name="desc">
    <formal-name>Description</formal-name>
    <description>A short description</description>
  </define-field>
  
  <define-assembly name="resource" group-as="resources">
    <flag name="id" datatype="ID" required="yes"/>
    <!--<flag name="rel"/>
		<flag name="media-type"/>-->
    <formal-name>Resource</formal-name>
    <description>A resource to inform or authenticate the present document, or to supplement it as an attachment</description>
    <remarks>
      <p>This element is used in two ways. In document metadata, it may describe and point to a mirror or other (authoritative or
        informative) copy of a document, or of a resouce helpful (necessary) for interpreting it,
        such as its metaschema or documentation. It may offer a (persistent) link to a
        <q>best available</q> version, or to an outdated version, as indicated by its
        <code>rel</code>.</p>
      <p>In back matter or within sections, a resource may be an attachment or any external document.</p>
      <p>The <code>rel</code> flag should be used to indicate the relation of the resource to the document
        referencing it, such as <q>catalog</q>, <q>baseline</q>, <q>metaschema</q> or <q>attachment</q>.</p>
    </remarks>
    <model>
      <!--<field    named="title"/>-->
      <!--<fields   named="author"/>-->
      <!--<field    named="format"/>-->
      <field named="desc" />
      <!--<field    named="date"/>-->
      <!--<field    named="version"/>-->
      <!--<fields   named="doc-id"/>-->
      <!--<fields   named="prop"/>-->
      <choice>
        <assemblies named="rlink"/>
        <field      named="base64" />
      </choice>
      <assembly named="notes"/>
    </model>
  </define-assembly>
  
  <define-field name="hash" group-as="hashes">
    <flag name="algorithm" required="yes"/>
    <formal-name>Hash</formal-name>
    <description>A document hash or other value subject to cryptographic authentication</description>
    <remarks>
      <p>When appearing as part of a resource (data object), the hash should apply to the referenced object.</p>
    </remarks>
  </define-field>

  <define-flag name="algorithm" datatype="string">
    <formal-name>Hash algorithm</formal-name>
    <description>Method by which a hash is derived</description>
    <remarks><p>One of the following is recognized: MD5, SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, RIPEMD-160. See <a href="https://www.w3.org/TR/xmlsec-algorithms/#digest-method">XML Security Algorithm Cross-Reference</a> (W3C, April 2013) for more information.</p></remarks>
  </define-flag>
  
  <define-assembly name="role" group-as="roles">
    <flag name="id" datatype="ID" required="yes"/>
    <formal-name>Role</formal-name>
    <description>Defining a role to be assigned to a party or agent</description>
    <remarks>
      <p>Permissible values to be determined closer to the application (e.g. by a receiving
        authority).</p>
    </remarks>
    <model>
      <field named="title"/>
      <field named="short-name"/>
      <field named="desc"/>
    </model>
  </define-assembly>
  
  <define-flag name="href" datatype="anyURI">
    <formal-name>hypertext reference</formal-name>
    <description>A link to a document or document fragment (actual, nominal or projected)</description>
    <remarks>
      <p>Note in particular that <code>href</code> targets include elements (locations) in
        representations of documents that exist only by virtue of dynamic application, such as (for
        example) the results of profile resolution.</p>
    </remarks>
  </define-flag>
  
  <define-assembly name="extra-meta">
    <formal-name>Extra metadata</formal-name>
    <description>Container for (system-defined) metadata</description>
    <model>
      <choice>
        <assemblies named="meta-group"/>
        <fields named="meta"/>
      </choice>
      <assembly named="notes"/>
    </model>
  </define-assembly>
  
  <define-assembly name="meta-group" group-as="metadata-groups">
    <flag name="term"/>
    <flag name="type"/>
    <formal-name>Metadata group</formal-name>
    <description>Custom- or application-defined annotated metadata.</description>
    <model>
      <fields     named="meta"/>
      <assemblies named="meta-group"/>
      <assembly   named="notes"/>
    </model>
  </define-assembly>
  
  <define-field name="meta" group-as="metadata-fields">
    <flag name="term"/>
    <flag name="type"/>
    <formal-name>Metadata field value</formal-name>
    <description>Any customized or specialized metadata value.</description>
  </define-field>
  
  <define-flag name="term" datatype="string">
    <formal-name>Metadata term</formal-name>
    <description>A classification (according to any schema or taxonomy) of a metadata value or set of values.</description>
  </define-flag>
  
  <define-flag name="id" datatype="ID">
    <formal-name>Identifier</formal-name>
    <description>Unique identifier</description>
    <remarks>
      <p>No mechanism is proposed to ensure that <code>id</code> values do not collide across
        different catalogs. Use profiling without <q>merge</q> to detect such clashes.</p>
    </remarks>
  </define-flag>
  
  <define-flag name="role-id" datatype="IDREFS">
    <formal-name>Role identifier</formal-name>
    <description>References a <code>role</code> element defined in metadata.</description>
  </define-flag>

  <!--<define-assembly name="preparation">
    <formal-name>Preparation</formal-name>
    <description>Naming organizations playing roles in the preparation.</description>
    <remarks>
      <p>May be used in place of or in addition to <code>history</code>.</p>
      <p>Values for <code>role</code> may include "prepared-by", "prepared-for" etc.</p>
    </remarks>
    <model>
      <assemblies group-as="organizations" named="organization"/>
    </model>
  </define-assembly>

  <define-assembly name="attachment">
    <flag name="href"/>
    <formal-name>Attachment</formal-name>
    <description>File attachment: ancillary information kept in a separate file.</description>
    <model>
      <field    named="title"/>
      <field    named="desc"/>
      <fields   named="doc-id" group-as="document-identifiers"/>
      <fields   named="pub-id" group-as="publication-ids"/>
      <assembly named="file"/>
      <assembly named="notes"/>
      <assemblies named="meta-group" group-as="meta-groups"/>
    </model>
  </define-assembly>
-->
  <!--<define-assembly name="file">
    <formal-name>File</formal-name>
    <description>Information about an attached file.</description>
    <model>
      <field named="format"/>
      <field named="timestamp"/>
      <field named="url">
        <description>When describing an attachment this element may be used to indicate
          an original or reference version.</description>
      </field>

    </model>
  </define-assembly>-->
  
  <!--<define-field name="format">
    <formal-name>Format</formal-name>
    <description>Describes a file format or MIME type.</description>
  </define-field>

  <define-field name="timestamp">
    <formal-name>Timestamp</formal-name>
    <description>A timestamp on a file, offered as corroborating information regarding a file attachment.</description>
  </define-field>
  
  <define-assembly name="system">
    <formal-name>System</formal-name>
    <description>A description of the system for which this specification is intended</description>
    <model>
      <field named="full-name"/>
      <field named="short-name"/>
      <field named="system-id"/>
      <field named="desc"/>
      <assembly named="notes"/> 
      <assemblies named="meta-group" group-as="metadata-groups"/>
    </model>
  </define-assembly>
  
  <define-field name="system-id">
    <flag name="type"/>
    <formal-name>System ID</formal-name>
    <description>A unique identifier for the system</description>
  </define-field>

  
  -->
  
  
  <!--<define-field name="author" group-as="authors">
		<formal-name>Author</formal-name>
		<description>A named author</description>
		<remarks><p>Note this information may be duplicative of information given in a <code>party</code>
			element with appropriate <code>role-id</code> flags, along with more a more complete structured
			listing. This element provides a value for display as well as an additional point of comparison.</p></remarks>
	</define-field>-->
  
  <!--<define-field name="doc-id" group-as="document-ids">
		<flag name="type"/>
		<formal-name>Document Identifier</formal-name>
		<description>Any sort of document identifier, name, code, path or other indicator of where and how this document
			may be located, compared or validated. Given appropriate qualification via its <code>type</code> and <code>rel</code>, this value may point to <q>the same</q> or <q>another version</q> of the document.</description>
		<remarks>
			<p>Flags <code>rel</code> and <code>type</code> can qualify the kind and use of document identifier, in particular whether the value is to be attributed to the given instance, or to another instance, source or resource.</p>
			<p>Specific usage rules, nomenclatures and recognized file types e.g. DOIs, CMS locators, etc
				etc., may be defined at application level. The value of this field may also be a hash or check sum.</p>
		</remarks>
	</define-field>-->
  
  <!--<define-flag name="type" datatype="string">
		<formal-name>Type</formal-name>
		<description>Indicating the type of identifier or other data item.</description>
		<remarks><p>Generally, this flag is used to relate to schemes and taxonomies defined outside the OSCAL application in some public form; i.e. they can be looked up.</p></remarks>
	</define-flag>-->
  
  
  
  <define-field name="title" as="mixed">
    <formal-name>Title</formal-name>
    <description>A title for display and navigation, exclusive of more specific properties</description>
  </define-field>
  
  
  
  
  <!--<define-field name="format" as="string">
    <formal-name>Resource or attachment Format</formal-name>
    <description>For use when no mime-type is available or additional information is required.</description>
  </define-field>-->
  
  <!--<define-field name="date" as="string">
    <flag name="iso-date"/>
    <formal-name>Date</formal-name>
    <description></description>
  </define-field>-->
  
  <define-field name="base64" as="string">
    <flag name="filename" datatype="string"/>
    <flag name="media-type"/>
    <formal-name>Base64</formal-name>
    <description></description>
  </define-field>
  
  <define-flag name="filename" datatype="string">
    <formal-name>File Name</formal-name>
    <description>Name of the file before it was converted to Base-64. This is the name that will be assigned to the file when converted back to binary.</description>
  </define-flag>
  
  <define-assembly name="citation-list">
    <formal-name>Citation list</formal-name>
    <description>A list of citations to resources, either external or (by means of internal cross-reference)
      saved or documented internally.</description>
    <model>
      <!--<field named="title"/>-->
      <!--<prose/>-->
      <!--<fields named="link"/>-->
      <!--<assemblies named="ref"/>
			<assemblies named="ref-list"/>-->
      <assemblies named="citation"/>
    </model>		
  </define-assembly>
  
  <!--<define-assembly name="ref" group-as="references">
		<flag name="id" datatype="ID"/>
		<formal-name>Reference</formal-name>
		<description> A reference, with one or more citations to standards, related documents, or
			other resources </description>
		<model>
			<fields named="citation"/>
			<prose/>
			<any/>
		</model>
	</define-assembly>-->
  
  <define-assembly name="citation" group-as="citations">
    <flag name="id" datatype="ID"/>
    <formal-name>Citation</formal-name>
    <description>Citation of a resource</description>
    <remarks>
      <p>Semantics of any contents within citation are implicit, not encoded. To mitigate problems establishing matches with bibliograpical databases, it is recommended a canonical
        identifier such as a DOI be provided for any citation.</p>
      <p>Within this element, a generic <code>title</code> can cite a title, or if citation information takes the form of a bibliographic entry, <code>p</code> can be deployed.</p>
    </remarks>
    <model>
      <fields named="target"/>
      <field named="title"/>
      <field named="desc"/>
      <fields named="doc-id"/>
      <any/>
    </model>
  </define-assembly>
  
  <define-field name="target" group-as="targets">
    <formal-name>Citation target</formal-name>
    <description>An address for retrieval of a citation</description>
    <remarks>
      <p>Semantically equivalent to an <code>href</code> (flag), this is represented as a field in order to permit citations to carry an extra target (for cross-check or fallback) and to permit further qualification (with flags of its own) in future.</p>
      <p>This value is expected to be a URI, and may be an internal link to
      another object such as a <code>resource</code> documented in back matter.</p>
      <p>When a citation is given as a full (but unparsed) bibliographic citation, use <code>desc</code> instead
      of <code>title</code> inside this object.</p>
    </remarks>
  </define-field>
  
</METASCHEMA>
