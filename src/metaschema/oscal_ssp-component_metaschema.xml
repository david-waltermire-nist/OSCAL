<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../build/metaschema/lib/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/xsl" href="metaschema-browser.xsl"?>
<?xml-stylesheet type="text/css" href="../../build/metaschema/lib/metaschema-author.css"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
  xmlns:o="http://csrc.nist.gov/ns/oscal/example"
  xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../build/metaschema/lib/metaschema.xsd"
  root="component_VALIDATION_root">
  <schema-name>OSCAL System Security Plan (SSP) Format Component Additions</schema-name>
  <schema-version>1.0.0-milestone2</schema-version>
  <short-name>oscal-ssp</short-name>
  <namespace>http://csrc.nist.gov/ns/oscal/1.0</namespace>
  <import href="oscal_metadata_metaschema.xml"/>
  <import href="oscal_implementation-common_metaschema.xml"/>
  
  <define-assembly name="component_VALIDATION_root">
    <formal-name>(nominal root)</formal-name>
    <description>NOT TO BE USED IN A METASCHEMA</description>
    <model>
      <assembly ref="component" max-occurs="unbounded">
        <group-as name="components" in-json="BY_KEY"/>
      </assembly>
      <assembly ref="capability" max-occurs="unbounded">
        <group-as name="capabilities" in-json="BY_KEY"/>
      </assembly>
      <assembly ref="implemented-component" max-occurs="unbounded">
        <group-as name="implemented-components" in-json="BY_KEY"/>
      </assembly>
      <assembly ref="by-component" max-occurs="unbounded">
        <group-as name="by-components" in-json="BY_KEY"/>
      </assembly>
    </model>
    <remarks>
      <p>This declaration provides a point of entry for validating the metaschema module standalone.</p>
    </remarks>
  </define-assembly>
  
W  
  <define-assembly name="component-relationship">
    <formal-name>Component Relationship</formal-name>
    <description>Establishes a relationship of a specific type between this component and another.</description>
    <json-key flag-name="component-id"/>
    <flag ref="component-id" required="yes"/>
    <flag name="type">
      <formal-name>Component Relationship Type</formal-name>
      <description>The type of relationship.</description>
      <!-- TODO: enumer valid values -->
    </flag>
    <model>
      <field ref="remarks" in-xml="WITH-WRAPPER"/>        
    </model>
  </define-assembly>
  
  <define-assembly name="capability">
    <formal-name>Capability</formal-name>
    <description>A grouping of other components and/or capabilities.</description>
    <json-key flag-name="id"/>
    <flag name="id" as-type="NCName" required="yes">
      <formal-name>Capability Identifier</formal-name>
      <description>A unique identifier for a capability.</description>
    </flag>
    <flag name="name" as-type="string" required="yes">
      <formal-name>Capability Name</formal-name>
      <description>The capability's human-readable name.</description>
    </flag>
    <model>
      <field ref="description" min-occurs="1"/>
      <field ref="prop" max-occurs="unbounded">
        <group-as name="properties"/>
      </field>
      <field ref="link" max-occurs="unbounded">
        <group-as name="links"/>
        <!-- TODO: Model specific link relationships for:
          depends-on: component has a dependency on another component
          validated-by:, etc.
        -->
      </field>
      <assembly ref="incorporates-capability" max-occurs="unbounded">
        <group-as name="incorporates-capabilities" in-json="BY_KEY"/>
      </assembly>
      <assembly ref="incorporates-component" max-occurs="unbounded">
        <group-as name="incorporates-components" in-json="BY_KEY"/>
      </assembly>
      <field ref="remarks" in-xml="WITH-WRAPPER"/>
    </model>
  </define-assembly>
  
  <define-assembly name="used-by-component">
    <formal-name>Used By</formal-name>
    <description>Identifies a type of uses for the service. A component can be optionally identified.</description>
    <flag ref="component-id"/>
    <model>
      <field ref="description" min-occurs="1"/>
    </model>
  </define-assembly>
  
  <define-assembly name="implemented-component">
    <formal-name>Implemented Component</formal-name>
    <description>The set of componenets that are implemented in a given system inventory item.</description>
    <json-key flag-name="component-id"/>
    <flag ref="component-id" required="yes"/>
    <flag name="type">
      <formal-name>Implementation Type</formal-name>
      <description>The type of implementation</description>
      <allowed-values>
        <enum value="runs-software">The implemented component is a 'software' component that the inventory item has installed and uses.</enum>
        <enum value="enforces-policy">The implemented component is a 'policy' component that the inventory item supports and enforces.</enum>
      </allowed-values>
    </flag>
    <model>
      <field ref="remarks" in-xml="WITH-WRAPPER"/>
    </model>
  </define-assembly>
  <define-assembly name="by-component">
    <formal-name>Component Control Implementation</formal-name>
    <description>Defines how the referenced component implements a set of controls.</description>
    <json-key flag-name="component-id"/>
    <flag ref="component-id" required="yes"/>
    <model>
      <field ref="description" min-occurs="1"/>
      <field ref="system-role-id" max-occurs="unbounded">
        <description>The system role responsible for the control implementation.</description>
        <group-as name="role-ids"/>
      </field>
      <assembly ref="set-param" max-occurs="unbounded">
        <group-as name="set-params" in-json="BY_KEY"/>
      </assembly>
      <field ref="prop" max-occurs="unbounded">
        <group-as name="properties"/>
      </field>
      <field ref="link" max-occurs="unbounded">
        <group-as name="links"/>
        <!-- TODO: Model specific link relationships -->
      </field>
    </model>
  </define-assembly>
  
  <define-assembly name="by-capability">
    <formal-name>capability Control Implementation</formal-name>
    <description>Defines how the referenced capability implements a set of controls.</description>
    <json-key flag-name="capability-id"/>
    <flag ref="capability-id" required="yes"/>
    <model>
      <field ref="description" min-occurs="1"/>
      <field ref="system-role-id" max-occurs="unbounded">
        <description>The system role responsible for the control implementation.</description>
        <group-as name="role-ids"/>
      </field>
      <assembly ref="set-param" max-occurs="unbounded">
        <group-as name="set-params" in-json="BY_KEY"/>
      </assembly>
      <field ref="prop" max-occurs="unbounded">
        <group-as name="properties"/>
      </field>
      <field ref="link" max-occurs="unbounded">
        <group-as name="links"/>
        <!-- TODO: Model specific link relationships -->
      </field>
    </model>
  </define-assembly>
</METASCHEMA>
