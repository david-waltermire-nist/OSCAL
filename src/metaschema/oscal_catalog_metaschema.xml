<?xml version="1.0" encoding="UTF-8"?>
<!-- OSCAL CATALOG METASCHEMA -->
<!-- validate with XSD and Schematron (linked) -->
<?xml-model href="../../build/metaschema/lib/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/xsl" href="metaschema-browser.xsl"?>
<?xml-stylesheet type="text/css" href="../../build/metaschema/lib/metaschema-author.css"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../build/metaschema/lib/metaschema.xsd"
 xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0" xmlns:o="http://csrc.nist.gov/ns/oscal/1.0"
 root="catalog">

  <schema-name>OSCAL Control Catalog Format</schema-name>
  <short-name>oscal-catalog</short-name>
  <namespace>http://csrc.nist.gov/ns/oscal/1.0</namespace>

  <remarks>
    <p>The OSCAL Control Catalog format can be used to describe a collection of security controls and related control enhancements (subcontrols), along with contextualizing documentation and metadata. The root of the Control Catalog format is <code>catalog</code>.</p>
    <p>An XML Schema is <a href="https://raw.githubusercontent.com/usnistgov/OSCAL/master/xml/schema/oscal-catalog-schema.xsd">provided</a> for the OSCAL Catalog XML model.</p>
  </remarks>
  
  <import href="oscal-metadata-metaschema.xml"/>
  
  <define-assembly name="catalog" group-as="control-catalog">
    <flag name="id" datatype="ID" required="yes"/>
    <flag name="model-version" required="yes"/>
    <formal-name>Catalog</formal-name>
    <description>A collection of controls</description>
    <remarks>
      <p>Catalogs may use <code>section</code> to subdivide the textual contents of a catalog.</p>
    </remarks>
    <model>
      <assembly named="metadata" required="yes"/>
      <!--<field named="declarations"/>-->
      <!--<assemblies named="section"/>-->
      <choice>
        <assemblies named="group"/>
        <assemblies named="control"/>
      </choice>
      <assembly named="back-matter"/>
    </model>
    <example>
      <description>A small catalog with a single control</description>
      <catalog id="simple-example" xmlns="http://csrc.nist.gov/ns/oscal/1.0" model-version="0.99">
        <title>A Miniature Catalog</title>
        <control id="single">
          <title>A Single Control</title>
        </control>
      </catalog>
    </example>
  </define-assembly>

  <define-assembly name="back-matter">
    <formal-name>Back matter</formal-name>
    <description>References, resources and attachments</description>
    <model>
      <!--<assemblies named="section"/>-->
      <assembly named="citation-list"/>
      <assemblies named="resource"/>
    </model>
  </define-assembly>
  
  <!--<define-field name="declarations" as="empty">
    <flag name="href" datatype="anyURI"/>
    <formal-name>Declarations</formal-name>
    <description>Either a reference to a declarations file, or a set of declarations</description>
  </define-field>-->

  <!--<define-assembly name="section" group-as="sections">
    <flag name="id" datatype="ID"/>
    <flag name="class"/>
    <formal-name>Section</formal-name>
    <description>Allows the inclusion of prose content within a Catalog.</description>
    <model>
      <field named="title" required="yes"/>
      <prose/>
      <assemblies named="section"/>
      <assembly named="citation-list"/>
      <any/>
    </model>
  </define-assembly>-->

  <define-assembly name="group" group-as="groups">
    <flag name="id" datatype="ID"/>
    <flag name="class"/>
    <formal-name>Control Group</formal-name>
    <description>A group of controls, or of groups of controls.</description>
    <remarks>
      <p>Catalogs can use groups to provide collections of related controls or Control Groups. A <code>group</code> may have its own properties, statements, parameters, and references, which are inherited by all members of that group. Unlike a <code>section</code>, a <code>group</code> may not contain arbitrary prose directly, only inside its <code>part</code> or <code>control</code> components.</p>
    </remarks>
    <model>
      <field named="title" required="yes"/>
      <assemblies named="param" address="id"/>
      <fields named="prop"/>
      <assemblies named="part"/>
      <choice>
        <assemblies named="group"/>
        <assemblies named="control"/>
      </choice>
      <!--<assembly named="ref-list"/>-->
      <any/>
    </model>
    <example>
      <group xmlns="http://csrc.nist.gov/ns/oscal/1.0" id="xyz">
        <title>My Group</title>
        <prop class="required">some property</prop>
        <control id="xyz1">
          <title>Control</title>
        </control>
      </group>
    </example>
  </define-assembly>

  <define-assembly name="control" group-as="controls">
    <flag name="id" datatype="ID" required="yes"/>
    <flag name="class"/>
    <formal-name>Control</formal-name>
    <description>A structured information object representing a security or privacy control. Each security or privacy control within the Catalog is defined by a distinct control instance.</description>
    <remarks>
      <p>Controls may be grouped using <code>group</code>, and controls may be partitioned using
        <code>part</code> or enhanced using <code>subcontrol</code>.</p>
    </remarks>
    <model>
      <field named="title" required="yes"/>
      <assemblies named="param" address="id"/>
      <fields named="prop"/>
      <fields named="link"/>
      <assemblies named="part"/>
      <assemblies named="subcontrol" address="id"/>
      <!--<assembly named="ref-list"/>-->
      <any/>
    </model>
    <example>
      <control id="x" xmlns="http://csrc.nist.gov/ns/oscal/1.0">
        <title>Control 1</title>
      </control>
    </example>
  </define-assembly>

  <define-assembly name="subcontrol" group-as="subcontrols" address="id">
    <flag name="id" datatype="ID" required="yes"/>
    <flag name="class"/>
    <formal-name>Sub-Control</formal-name>
    <description>A control extension or enhancement</description>
    <model>
      <field named="title" required="yes"/>
      <assemblies named="param" address="id"/>
      <fields named="prop"/>
      <fields named="link"/>
      <assemblies named="part"/>
      <!--<assembly named="ref-list"/>-->
      <any/>
    </model>
  </define-assembly>
  
  <define-field name="title" as="mixed">
    <formal-name>Title</formal-name>
    <description>A title for display and navigation, exclusive of more specific properties</description>
    <remarks>
      <p>A title given to a control or subcontrol will be its name or whatever
      human-readable string it is known by. Given to other objects (sections,
      groups, parts) it is the title as it should appear in a formatted document.</p>
    </remarks>
  </define-field>

  <!-- See metadata model for 'prop' element -->
  
  <define-assembly name="param" address="id" group-as="parameters">
    <flag name="id" datatype="ID" required="yes"/>
    <flag name="class"/>
    <flag name="depends-on" datatype="IDREF"/>
    <formal-name>Parameter</formal-name>
    <description>Parameters provide a mechanism for the dynamic assignment of value(s) in a control.</description>
    <remarks>
      <p>In a catalog, a parameter is typically used as a placeholder for the future assignment of a parameter value, although the OSCAL model allows for the direct assignment of a value if desired by the control author. The <code>value</code> may be optionally used to specify one or more values. If no value is provided, then it is expected that the value will be provided at the Profile or Implementation layer.</p>
      <p>A parameter can include a variety of metadata options that support the future solicitation of one or more values. A <code>label</code> provides a textual placeholder that can be used in a tool to solicit parameter value input, or to display in catalog documentation. The <code>desc</code> provides a short description of what the parameter is used for, which can be used in tooling to help a user understand how to use the parameter. A <code>constraint</code> can be used to provide criteria for the allowed values. A <code>guideline</code> provides a recommendation for the use of a parameter.</p>
    </remarks>
    <model>
      <field named="label">
        <description>A short name for the parameter.</description>
        <remarks>
          <p>The label value should be suitable for inline display in a rendered catalog.</p>
        </remarks>
      </field>
      <fields named="desc">
        <description>A short summary of the parameter's intended use.</description>
        <remarks><p> A label is optional, but should be provided unless a <code>select</code> (selection) is provided.</p></remarks>
      </fields>
      <fields named="constraint">
        <description>A rule describing the permissible parameter values.</description>
        <remarks>
          <p>Currently, OSCAL does not standardize any formal rules language for value constraints. A <code>test</code> option may be used to specify a formal rule that may be automatically used if recognized by an OSCAL tool. Further development is <a href="https://github.com/usnistgov/OSCAL/issues/206">needed</a> to support the declaration of a rule language and value.</p>
        </remarks>
      </fields>
      <assemblies named="guideline">
        <description>Additional recommendations for the use of the parameter, or around what values should be provided.</description>
      </assemblies>
      <choice>
        <field named="value">
          <description>A recommended parameter value or set of values.</description>
          <remarks>
            <p>A value provided in a catalog can be redefined at any higher layer of OSCAL (e.g., Profile).</p>
          </remarks>
        </field>
        <assembly named="select">
          <description>A set of parameter value choices, that may be picked from to set the parameter value.</description>
          <remarks>
            <p>.</p>
          </remarks>
        </assembly>
      </choice>
      <fields named="link">
        <description></description>
      </fields>
      <any/>
    </model>
  </define-assembly>

  <define-field name="label" as="mixed">
    <formal-name>Parameter label</formal-name>
    <description>A placeholder for a missing value, in display.</description>
  </define-field>

  <!-- @has-id = none on fields, when there are no attributes, permits
     us to produce a string (not an object) on the JSON side. -->
  <define-field name="desc" group-as="descriptions" as="mixed">
    <flag name="id" datatype="ID"/>
    <formal-name>Parameter description</formal-name>
    <description>Indicates and explains the purpose and use of a parameter</description>
  </define-field>

  <define-field name="constraint" group-as="constraints">
    <flag name="test"/>
    <formal-name>Constraint</formal-name>
    <description>A formal or informal expression of a constraint or test</description>
  </define-field>
  
  <define-assembly name="guideline" group-as="guidance">
    <formal-name>Guideline</formal-name>
    <description>A prose statement that provides a recommendation for the use of a parameter.</description>
    <model>
      <prose/>
      <any/>
    </model>
  </define-assembly>
  
  <define-field name="value" as="mixed">
    <formal-name>Value constraint</formal-name>
    <description>Indicates a permissible value for a parameter or property</description>
    <remarks>
      <p>In a declaration, <code>value</code> will commonly be given in groups, indicating a set of
        enumerated permissible values (i.e., for an element to be valid to a value constraint, it
        must equal one of the given values).</p>
      <p>In a parameter, a value represents a value assignment to the parameter, overriding any
        value given at the point of insertion. When parameters are provided in OSCAL profiles, their
        values will override any values assigned <q>lower down the stack</q>.</p>
    </remarks>
  </define-field>


  <define-assembly name="select">
    <flag name="how-many"/>
    <formal-name>Selection</formal-name>
    <description>Presenting a choice among alternatives</description>
    <model>
      <fields named="choice"/>
      <any/>
    </model>
  </define-assembly>

  <define-field name="choice" group-as="alternatives" as="mixed">
    <formal-name>Choice</formal-name>
    <description>A value selection among several such options</description>
  </define-field>

  <define-assembly name="part" group-as="parts">
    <flag name="id" datatype="ID"/>
    <flag name="name" required="yes"/>
    <flag name="ns"/>
    <flag name="class"/>
    <formal-name>Part</formal-name>
    <description>A partition or component of a control, subcontrol or part</description>
    <remarks>
      <p>Like properties (<code>prop</code>) and parameters (<code>param</code>), parts can be
        distinguished from other elements within their controls by their assigned
        <code>class</code>, such that they may be subjected to <q>declarations logic</q> using
        these values as bindings (and thereby getting open-ended extensibility).</p>
      <p>An assigned class may frequently provide for a header in display, such that
        <code>part</code><code>[@class='objectives']</code> is displayed under a header <em>Objectives</em>, etc.
        Parts may also however have their own titles (<code>title</code> elements).</p>
      <p>Many parts are logical partitions or sections for prose. Other parts may be more formally
        constructed out of properties (<code>prop</code> elements) and/or their own parts. Such
        structured objects may, at the extreme, function virtually as control extensions or
        subcontrol-like objects (<q>enhancements</q>).</p>
    </remarks>
    <model>
      <field named="title"/>
      <fields named="prop"/>
      <prose/>
      <assemblies named="part"/>
      <fields named="link"/>
      <any/>
    </model>
  </define-assembly>

  <define-flag name="id" datatype="ID">
    <formal-name>ID / identifier</formal-name>
    <description>Unique identifier</description>
    <remarks>
      <p>No mechanism is proposed to ensure that <code>id</code> values do not collide across
        different catalogs. Use profiling without <q>merge</q> to detect such clashes.</p>
    </remarks>
    <example>
      <o:citation id="xyz2">Some <o:strong>citation</o:strong> of some sort</o:citation>
    </example>
  </define-flag>

  <define-flag name="test" datatype="string">
    <formal-name>Constraint test</formal-name>
    <description>A formal (executable) expression of a constraint</description>
  </define-flag>

  <define-flag name="how-many" datatype="string">
    <formal-name>Cardinality</formal-name>
    <description>When selecting, a requirement such as one or more</description>
  </define-flag>
  
  <define-flag name="depends-on" datatype="IDREF">
    <formal-name>Depends on</formal-name>
    <description>Another parameter invoking this one</description>
  </define-flag>
  
  <define-flag name="model-version" datatype="string">
    <formal-name>Model version</formal-name>
    <description>Declares a major/minor version for this metaschema</description>
  </define-flag>
  
</METASCHEMA>