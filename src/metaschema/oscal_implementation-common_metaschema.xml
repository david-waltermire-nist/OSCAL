<?xml version="1.0" encoding="UTF-8"?>
<?xml-model href="../../build/metaschema/lib/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/xsl" href="metaschema-browser.xsl"?>
<?xml-stylesheet type="text/css" href="../../build/metaschema/lib/metaschema-author.css"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
    xmlns:o="http://csrc.nist.gov/ns/oscal/example"
    xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../build/metaschema/lib/metaschema.xsd"
    root="VALIDATION_common_root">

    <schema-name>OSCAL Implementation Common Information</schema-name>
    <schema-version>1.0.0-milestone2</schema-version>
    <short-name>oscal-implementation-common</short-name>
    <namespace>http://csrc.nist.gov/ns/oscal/1.0</namespace>

    <import href="oscal_metadata_metaschema.xml"/>

    <define-assembly name="VALIDATION_common_root">
        <formal-name>(nominal root)</formal-name>
        <description>NOT TO BE USED IN A METASCHEMA</description>
        <flag ref="component-id"/>
        <flag ref="component-type"/>
        <flag ref="capability-id"/>
        <flag ref="source"/>
        <model>
            <field ref="description"/>
            <field ref="remarks"/>
<!--            <assembly ref="proof-of-compliance"/>
-->
            <assembly ref="supplier"/>
            <assembly ref="implemented-requirement"/>
            <assembly ref="incorporates-component">
                <group-as name="incorporates-components" in-json="BY_KEY"/>
            </assembly>
            <assembly ref="incorporates-capability">
                <group-as name="incorporates-capabilities" in-json="BY_KEY"/>
            </assembly>
        </model>
        <remarks>
            <p>This declaration provides a point of entry for validating the metaschema module standalone.</p>
        </remarks>
    </define-assembly>

    <define-flag name="component-type" as-type="string">
        <formal-name>Component Type</formal-name>
        <description>A category describing the purpose of the component.</description>
        <valid-values allow-other="yes">
            <value name="software">Any software, operating system, or firmware</value>
            <value name="hardware"></value>
            <value name="service">A service that may provide APIs.</value>
            <value name="policy"></value>
            <value name="process"></value>
            <value name="proceedure"></value>
            <value name="plan"></value>
            <value name="guidance">Any guideline or recommendation</value>
            <value name="standard"></value>
            <value name="validation"></value>
        </valid-values>
    </define-flag>
    
    <define-assembly name="supplier">
        <formal-name>Supplier</formal-name>
        <description>TBD</description>
        <!--
    <flag name="id" as-type="ID">
      <formal-name>Supplier Identifier</formal-name>
      <description>TBD</description>
    </flag>
-->
        <flag ref="party-id" required="yes"/>
        <flag ref="role-id" required="yes">
            <!-- TODO: define standard roles -->
        </flag>
        <model>
            <field ref="remarks"/>
        </model>
        <remarks>
            <p>For products, services, and APIs, this is the vendor and/or retailer information.</p>
            <p>For policies, processes, plans, standards, and guidance, this is the authoring
                organization.</p>
            <p>For capabilities, this is the organization that defines and maintains the
                capability.</p>
        </remarks>
    </define-assembly>
<!--
    <define-assembly name="proof-of-compliance">
        <formal-name>validation</formal-name>
        <description>TBD</description>
        <model>
            <assembly ref="supplier" min-occurs="1" max-occurs="unbounded">
                <group-as name="suppliers"/>
            </assembly>
            <field ref="description"/>
            <field ref="prop" max-occurs="unbounded">
                <group-as name="properties"/>
            </field>
            <field ref="link" max-occurs="unbounded">
                <group-as name="links"/>
                <!-\- TODO: Model specific link relationships for:
          validated-by: pointer to validation cert.
        -\->
            </field>
        </model>
    </define-assembly>
-->
    <define-flag name="source" as-type="uri-reference">
        <formal-name>Source Resource Reference</formal-name>
        <description>A reference to an OSCAL catalog or profile providing the referenced control or subcontrol definition.</description>
    </define-flag>

    <define-assembly name="implemented-requirement">
        <formal-name>Control-based Requirement</formal-name>
        <description>TBD</description>
        <flag name="requirement-id" as-type="NCName">
            <formal-name>Requirement Identifier Reference</formal-name>
            <description>A reference to a requirement defined on another requirement set that should be included here.</description>
        </flag>
        <!-- TODO: instead of using `choice` here we could use Schematron e.g. count(@control-id|@subcontrol)=1 -->
        <flag ref="id"/>
        <flag ref="control-id"/>
        <model>
            <field ref="only-statement" max-occurs="unbounded">
                <group-as name="only-statements"/>
            </field>
            <field ref="description"/>
            <field ref="prop" max-occurs="unbounded">
                <group-as name="properties"/>
            </field>
            <field ref="link" max-occurs="unbounded">
                <group-as name="links"/>
                <!-- TODO: Model specific link relationships -->
            </field>
<!--            <assembly ref="using"/>
-->            <!-- TODO: Implement parameters -->
            <field ref="remarks"/>
        </model>
    </define-assembly>
    
    <define-flag name="control-id" as-type="NCName">
        <formal-name>Control Identifier Reference</formal-name>
        <description>A reference to a control identifier.</description>
    </define-flag>
    
    <define-field name="only-statement" as-type="NCName">
        <formal-name>Specific Statement</formal-name>
        <description>Describes which specific statements are addressed by a requirement, by pointing to a speific requirement statement within a control..</description>
    </define-field>

    <define-flag name="component-id" as-type="IDREF">
        <formal-name>Component Reference</formal-name>
        <description>A reference to a component by its identifier</description>
    </define-flag>

    <define-flag name="capability-id" as-type="IDREF">
        <formal-name>Capability Reference</formal-name>
        <description>A reference to a capability by its identifier</description>
    </define-flag>
    <define-assembly name="incorporates-component">
        <formal-name>Incorporates Component</formal-name>
        <description>TBD</description>
        <json-key flag-name="component-id"/>
        <flag ref="component-id" required="true"/>
        <model>
            <field ref="description" min-occurs="1"/>
        </model>
    </define-assembly>

    <define-assembly name="incorporates-capability">
        <formal-name>Incorporates Capability</formal-name>
        <description>TBD</description>
        <json-key flag-name="capability-id"/>
        <flag name="capability-id" required="true" as-type="IDREF">
            <formal-name>Capability Reference</formal-name>
            <description>A reference to a capability by its identifier</description>
        </flag>
        <model>
            <field ref="description" min-occurs="1"/>
        </model>
    </define-assembly>

</METASCHEMA>
