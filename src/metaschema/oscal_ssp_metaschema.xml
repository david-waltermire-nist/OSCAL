<?xml version="1.0" encoding="UTF-8"?>
<!-- ** NOTES **
- Need to check latest FR SSP template for "Privacy Impact Designation".
  Was it dropped in latest template, or is it missing from schema?
-->
<!-- OSCAL Implementation Layer: System Security Plan (SSP) METASCHEMA -->
<!-- validate with XSD and Schematron (linked) -->
<?xml-model href="../../build/metaschema/lib/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/xsl" href="metaschema-browser.xsl"?>
<?xml-stylesheet type="text/css" href="../../build/metaschema/lib/metaschema-author.css"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
            xmlns:o="http://csrc.nist.gov/ns/oscal/example"
            xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../build/metaschema/lib/metaschema.xsd"
            root="system-security-plan">
   <schema-name>OSCAL System Security Plan (SSP) Format</schema-name>
   <schema-version>1.0.0-milestone2</schema-version>
   <short-name>oscal-ssp</short-name>
   <namespace>http://csrc.nist.gov/ns/oscal/1.0</namespace>
   <remarks>
      <p>The OSCAL Control SSP format can be used to describe the information typically specified
			in a system security plan, such as those defined in SP 800-18.</p>
      <p>The root of the OSCAL System Security Plan (SSP) format is <code>system-security-plan</code>.</p>
      <p>NOTE: This documentation is a work in progress. As a result, documentation for many of the information elements is missing or incomplete.</p>
   </remarks>
   <!-- IMPORT STATEMENTS -->
   <import href="oscal_metadata_metaschema.xml"/>
   <import href="oscal_implementation-common_metaschema.xml"/>

   <!-- TOP LEVEL ASSEMBLY -->
   <define-assembly name="system-security-plan">
      <formal-name>System Security Plan (SSP)</formal-name>
      <description>A system security plan, such as those defined in SP 800-18</description>
      <flag ref="id" required="yes"/>
      <model>
         <assembly ref="metadata"/>
         <assembly ref="import-profile" min-occurs="1"/>
         <assembly ref="system-characteristics" min-occurs="1"/>
         <assembly ref="system-implementation"/>
         <assembly ref="control-implementation"/>
         <assembly ref="back-matter"/>
      </model>
      <example/>
   </define-assembly>
   <!-- Profile Import -->
   <define-assembly name="import-profile">
      <formal-name>Import profile</formal-name>
      <description>Used to import the OSCAL profile representing the system's control baseline.</description>
      <flag ref="href" required="yes"/>
      <model>
         <field ref="remarks" in-xml="WITH-WRAPPER"/>
      </model>
   </define-assembly>

   <!-- SYSTEM CHARACTERISTICS -->
   <define-assembly name="system-characteristics">
      <formal-name>System Characteristics</formal-name>
      <description>Contains the characteristics of the system, such as its name, purpose, and
			security impact level.</description>
      <model>
         <field ref="system-id" min-occurs="1" max-occurs="unbounded">
            <group-as name="system-ids"/>
         </field>
         <field ref="system-name" min-occurs="1"/>
         <field ref="system-name-short"/>
         <field ref="description" min-occurs="1">
            <description>A free-text description of the system.</description>
         </field>
         <field ref="date-authorized"/>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
            <flag ref="name">
               <allowed-values allow-other="yes">
                  <enum value="identiy-assurance-level">A value of 1, 2, or 3 as defined by <a href="https://doi.org/10.6028/NIST.SP.800-63-3">SP 800-63-3</a>.</enum>
                  <enum value="authenticator-assurance-level">A value of 1, 2, or 3 as defined by <a href="https://doi.org/10.6028/NIST.SP.800-63-3">SP 800-63-3</a>.</enum>
                  <enum value="federation-assurance-level">A value of 1, 2, or 3 as defined by <a href="https://doi.org/10.6028/NIST.SP.800-63-3">SP 800-63-3</a>.</enum>
<!--                  <enum value="minimum-x-assurance-level">A value of 1, 2, or 3, which is the minimum value of identiy-assurance-level, authenticator-assurance-level, and federation-assurance-level.</enum>
-->               </allowed-values>
            </flag>
         </field>
         <assembly ref="characteristic" max-occurs="unbounded">
            <group-as name="characteristics"/>
            <flag ref="name">
               <allowed-values>
                  <enum value="cloud-deployment-model">The associated value is one of: public-cloud, private-cloud, community-cloud, government-only-cloud, hybrid-cloud, or other.</enum>
                  <enum value="cloud-service-model">The associated value is one of: saas, paas, iaas, or other.</enum>
               </allowed-values>
            </flag>
         </assembly>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links"/>
            <!-- TODO: Model specific link relationships -->
         </field>
         <field ref="security-sensitivity-level" min-occurs="1"/>
         <assembly ref="system-information" min-occurs="1"/>
         <assembly ref="security-impact-level" min-occurs="1">
            <!-- TODO: Is this needed, or can it be computed based on the high water mark of the information types? -->
         </assembly>
         <field ref="status" min-occurs="1" in-xml="WITH-WRAPPER">
            <flag ref="state">
               <allowed-values>
                  <enum value="operational">The system is currently operating and is in production.</enum>
                  <enum value="under-development">The system is being designed, developed, or implemented</enum>
                  <enum value="under-major-modification">The system is undergoing a major change, development, or transition.</enum>
                  <enum value="disposition">The system is no longer operational.</enum>
                  <enum value="other">Some other state.</enum>
               </allowed-values>
            </flag>
         </field>
         <assembly ref="leveraged-authorization" max-occurs="unbounded">
            <group-as name="leveraged-authorizations"/>
         </assembly>
         <assembly ref="authorization-boundary" min-occurs="1"/>
         <assembly ref="network-architecture"/>
         <assembly ref="data-flow"/>
      </model>
   </define-assembly>
   <define-field name="system-id" as-type="string">
      <formal-name>System Identification</formal-name>
      <description>A unqiue identifier for the system described by this system security plan.</description>
      <flag name="identifier-type" as-type="uri">
         <formal-name>Identification System Type</formal-name>
         <description>Defines the namespace or identifcation system from which the provided identifier was assigned from.</description>
         <allowed-values allow-other="yes">
            <enum value="https://fedramp.gov">The identifier was assigned by FedRAMP.</enum>
            <enum value="https://ietf.org/rfc/rfc4122">A Universally Unique IDentifier (UUID) as defined by RFC4122.</enum>
         </allowed-values>
      </flag>
   </define-field>
   <define-field name="system-name" as-type="string">
      <formal-name>System Name (Full)</formal-name>
      <description>The full name of the system.</description>
   </define-field>
   <define-field name="system-name-short" as-type="string">
      <formal-name>System Name (Short)</formal-name>
      <description>A short name for the system that is suitable for display in a data table or summary list.</description>
   </define-field>

   <define-field name="security-sensitivity-level">
      <!-- TODO: Any constraints for the values? -->
      <formal-name>Security Sensitivity Level</formal-name>
      <description>The overall information system sensitivity categorization, such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</description>
      <allowed-values>
         <enum value="low">A 'low' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
         <enum value="moderate">A 'moderate' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
         <enum value="high">A 'high' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
      </allowed-values>
      <remarks>
         <p>In most typical cases, the security sensitivity level should correspond to the highest confidentiality, integrity, or availability value of the <code>security-impact-level</code>.</p>
      </remarks>
   </define-field>

   <define-assembly name="system-information">
      <formal-name>System Information</formal-name>
      <description>Contains details about all types of information stored, processed, or
			transmitted by the system, such as privacy information, and NIST 800-60 information
			types.</description>
      <model>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
            <flag ref="name">
               <allowed-values allow-other="yes">
                  <enum value="privacy-designation">Is the system a privacy sensitive system? yes or no</enum>
                  <!-- TODO: Model specific property names -->
               </allowed-values>
            </flag>
         </field>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links"/>
            <flag ref="rel">
               <allowed-values allow-other="yes">
                  <enum value="privacy-impact-assessment">A link to a privacy impact assessment.</enum>
                  <!-- TODO: Model specific link relationships -->
               </allowed-values>
            </flag>
         </field>
         <assembly ref="information-type" min-occurs="1" max-occurs="unbounded">
            <group-as name="information-types"/>
         </assembly>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="information-type">
      <formal-name>Information Type</formal-name>
      <description>Contains details about one type of information stored, processed, or
			transmitted by the system, such as privacy information, and NIST 800-60 information
			types.</description>
      <flag ref="id"/>
      <flag ref="nist-id">
         <!-- TODO: Make id and identification system -->
      </flag>
      <flag name="name" required="yes">
         <formal-name>Information Type Name</formal-name>
         <description>The name of the information type.</description>
      </flag>
      <model>
         <field ref="description" min-occurs="1"/>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
         <assembly ref="confidentiality-impact" min-occurs="1"/>
         <assembly ref="integrity-impact" min-occurs="1"/>
         <assembly ref="availability-impact" min-occurs="1"/>
      </model>
   </define-assembly>
   <define-assembly name="confidentiality-impact">
      <formal-name>Confidentiality Impact Level</formal-name>
      <description>TBD</description>
      <model>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
         <field ref="base" min-occurs="1"/>
         <field ref="selected"/>
         <field ref="adjustment-justification"/>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="integrity-impact">
      <formal-name>Integrity Impact Level</formal-name>
      <description>TBD</description>
      <model>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
         <field ref="base" min-occurs="1"/>
         <field ref="selected"/>
         <field ref="adjustment-justification"/>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="availability-impact">
      <formal-name>Availability Impact Level</formal-name>
      <description>TBD</description>
      <model>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
         <field ref="base" min-occurs="1"/>
         <field ref="selected"/>
         <field ref="adjustment-justification"/>
      </model>
      <example/>
   </define-assembly>
   <define-field name="base" as-type="string">
      <formal-name>Base Level (Confidentiality, Integrity, or Availability)</formal-name>
      <description>The prescribed base (Confidentiality, Integrity, or Availability) security
			impact level.</description>
      <allowed-values>
        <enum value="low">A 'low' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
        <enum value="moderate">A 'moderate' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
        <enum value="high">A 'high' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
      </allowed-values>
   </define-field>
   <define-field name="selected" as-type="string">
      <formal-name>Selected Level (Confidentiality, Integrity, or Availability)</formal-name>
      <description>The selected (Confidentiality, Integrity, or Availability) security impact
			level.</description>
      <allowed-values>
        <enum value="low">A 'low' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
        <enum value="moderate">A 'moderate' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
        <enum value="high">A 'high' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
      </allowed-values>
   </define-field>
   <define-field name="adjustment-justification" as-type="markup-multiline">
      <formal-name>Adjustment Justification</formal-name>
      <description>If the selected security level is different from the base security level, this
			contains the justificaiton for the change.</description>
   </define-field>
   <define-assembly name="security-impact-level">
      <formal-name>Security Impact Level</formal-name>
      <description>TBD</description>
      <model>
         <field ref="security-objective-confidentiality"/>
         <field ref="security-objective-integrity"/>
         <field ref="security-objective-availability"/>
      </model>
      <example/>
   </define-assembly>
   <define-field name="security-objective-confidentiality" as-type="string">
      <formal-name>Security Objective: Confidentiality</formal-name>
      <description>TBD</description>
      <allowed-values>
        <enum value="low">A 'low' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
        <enum value="moderate">A 'moderate' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
        <enum value="high">A 'high' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
      </allowed-values>
   </define-field>
   <define-field name="security-objective-integrity" as-type="string">
      <formal-name>Security Objective: Integrity</formal-name>
      <description>TBD</description>
      <allowed-values>
        <enum value="low">A 'low' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
        <enum value="moderate">A 'moderate' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
        <enum value="high">A 'high' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
      </allowed-values>
   </define-field>
   <define-field name="security-objective-availability" as-type="string">
      <formal-name>Security Objective: Availability</formal-name>
      <description>TBD</description>
      <allowed-values>
        <enum value="low">A 'low' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
        <enum value="moderate">A 'moderate' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
        <enum value="high">A 'high' sensitivity level such as what is defined in <a href="https://doi.org/10.6028/NIST.FIPS.199">FIPS-199</a>.</enum>
      </allowed-values>
   </define-field>
   <define-field name="status" as-type="markup-multiline">
      <formal-name>Status</formal-name>
      <description>Describes the status of the parent system or component.</description>
      <flag name="state" required="yes" as-type="string">
         <formal-name>State</formal-name>
         <description>TBD</description>
      </flag>
      <remarks>
         <p>If 'other' is selected, a remark must be included to describe the current state.</p>
      </remarks>
   </define-field>

   <define-assembly name="leveraged-authorization">
      <formal-name>Leveraged Authorization</formal-name>
      <description>A description of another authorized system from which this system inherits capabilities that satisfy security requirements. Another term for this concept is a <em>common control provider</em>.</description>
      <flag ref="id"/>
      <flag ref="name" required="yes"/>
      <model>
         <field ref="party-id" min-occurs="1">
            <description>A reference to the party that manages the leveraged system.</description>
         </field>
         <field ref="date-authorized" min-occurs="1"/>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
            <!-- TODO: Model specific prop relationships -->
         </field>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links"/>
            <!-- TODO: Model specific link relationships -->
            <!-- TODO: Should this be able to reference another SSP? Which rel? -->
         </field>
      </model>
      <example/>
   </define-assembly>
   <define-field name="date-authorized" as-type="date">
      <formal-name>System Authorization Date</formal-name>
      <description>The date the containing system received its authorization.</description>
   </define-field>

   <define-assembly name="authorization-boundary">
      <formal-name>Authorization Boundary</formal-name>
      <description>TBD</description>
      <model>
         <field ref="description" min-occurs="1"/>
         <assembly ref="diagram" max-occurs="unbounded">
            <group-as name="diagrams" in-json="BY_KEY"/>
         </assembly>
         <field ref="remarks" in-xml="WITH-WRAPPER"/>
      </model>
      <example/>
   </define-assembly>

   <define-assembly name="diagram">
      <formal-name>Diagram</formal-name>
      <description>TBD</description>
      <json-key flag-name="id"/>
      <flag name="id" as-type="NCName" required="yes">
         <formal-name>Diagram ID</formal-name>
         <description>An identifier for this diagram.</description>
      </flag>
      <flag ref="href" required="yes"/>
      <model>
         <field ref="description" in-xml="WITH-WRAPPER">
            <description>A description of the diagram (e.g., alternate text). This can be used to support compliance with requirements from Section 508 of the United States Workforce Rehabilitation Act of 1973.</description>
         </field>
      </model>
      <remarks>
         <p>The href references a remote URI or an internal reference within this document containing the diagram.</p>
      </remarks>
      <example>
         <o:diagram href="#attachmentA" id="boundary-diagram-1">
            <o:description>A boundary diagram - bad example text.</o:description>
         </o:diagram>
      </example>
   </define-assembly>
   <define-assembly name="network-architecture">
      <formal-name>Network Architecture Diagrams</formal-name>
      <description>TBD</description>
      <model>
         <field ref="description" min-occurs="1" in-xml="WITH-WRAPPER"/>
         <assembly ref="diagram" max-occurs="unbounded">
            <group-as name="diagrams" in-json="BY_KEY"/>
         </assembly>
         <field ref="remarks" in-xml="WITH-WRAPPER"/>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="data-flow">
      <!-- TODO: Should this relate to a system-interconnection? -->
      <formal-name>Data Flow</formal-name>
      <description>TBD</description>
      <model>
         <field ref="description" min-occurs="1" in-xml="WITH-WRAPPER"/>
         <assembly ref="diagram" max-occurs="unbounded">
            <group-as name="diagrams" in-json="BY_KEY"/>
         </assembly>
         <field ref="remarks" in-xml="WITH-WRAPPER"/>
      </model>
      <example/>
   </define-assembly>
 
   <!-- SYSTEM IMPLEMENTATION -->
   <define-assembly name="system-implementation">
      <formal-name>System Implementation</formal-name>
      <description>Provides information as to how the system is implemented.</description>
      <model>
         <assembly ref="system-role" min-occurs="1" max-occurs="unbounded">
            <group-as name="system-roles" in-json="BY_KEY"/>
         </assembly>
         
         <assembly ref="component" max-occurs="unbounded">
            <group-as name="components" in-json="BY_KEY"/>
         </assembly>
         <!--         <assembly ref="capability" max-occurs="unbounded">
            <group-as name="capabilities" in-json="BY_KEY"/>
         </assembly>
-->         <assembly ref="service" max-occurs="unbounded">
            <description>A collection of the ports, protocols, and services used within the
               system.</description>
            <group-as name="services"/>
         </assembly>
         <assembly ref="interconnection" max-occurs="unbounded">
            <group-as name="ssp-interconnection"/>
         </assembly>
         <assembly ref="system-inventory"/>
      </model>
      <example/>
   </define-assembly>
   
   <define-assembly name="system-role">
      <!-- **** Need to ensure <users> </users> matches pocs, roles, orgs **** -->
      <formal-name>System Role</formal-name>
      <description>Defining a role to be assigned to a party or agent</description>
      <json-key flag-name="id"/>
      <flag name="id" as-type="NCName" required="yes">
         <formal-name>System Role ID</formal-name>
         <description>TBD</description>
      </flag>
      <flag ref="name" required="yes"/>
      <!-- TODO: provide valid values for these? -->
      <flag ref="external">
      </flag>
      <flag ref="access" required="yes"/>
      <flag ref="sensitivity-level" required="yes"/>
      <model>
         <field ref="role-id" min-occurs="1"/>
         <field ref="title"/>
         <field ref="short-name"/>
         <field ref="description"/>
         <!-- The following fields appear in <users><roles>, but not in <metadata><roles> -->
         <field ref="privilege" max-occurs="unbounded">
            <group-as name="privileges"/>
         </field>
         <field ref="responsibility" max-occurs="unbounded">
            <group-as name="responsibilities"/>
         </field>
         <assembly ref="statistics" />
      </model>
      <remarks>
         <p>Permissible values to be determined closer to the application (e.g. by a receiving
            authority).</p>
      </remarks>
   </define-assembly>
   <define-field name="privilege" as-type="string">
      <formal-name>Privilege</formal-name>
      <description>Identifies the type/level of system privilege for the role.
         For FedRAMP, the only valid values are "p" (Privileged), "np" (Non-Privileged), or "nla" (No Logical Access).</description>
   </define-field>
   <define-field name="responsibility" as-type="string">
      <formal-name>Responsibility</formal-name>
      <description>Identifies the functions performed by the user role.</description>
   </define-field>
   <define-assembly name="statistics">
      <formal-name>Statistics</formal-name>
      <description>Provides a collection of statistics about users of the system.</description>
      <model>
         <field ref="internal-user-total-current"/>
         <field ref="internal-user-total-future"/>
         <field ref="external-user-total-current"/>
         <field ref="external-user-total-future"/>
      </model>
      <example/>
   </define-assembly>
   <define-field name="internal-user-total-current" as-type="positiveInteger">
      <formal-name>Total Current Internal Users</formal-name>
      <description>TBD</description>
      <remarks>
         <p>To be validated as a natural number (integer &gt;= 1)</p>
      </remarks>
   </define-field>
   <define-field name="internal-user-total-future" as-type="positiveInteger">
      <formal-name>Total Future Internal Users</formal-name>
      <description>TBD</description>
      <remarks>
         <p>To be validated as a natural number (integer &gt;= 1)</p>
      </remarks>
   </define-field>
   <define-field name="external-user-total-current" as-type="positiveInteger">
      <formal-name>Total Current External Users</formal-name>
      <description>TBD</description>
      <remarks>
         <p>To be validated as a natural number (integer &gt;= 1)</p>
      </remarks>
   </define-field>
   <define-field name="external-user-total-future" as-type="positiveInteger">
      <formal-name>Total Future External Users</formal-name>
      <description>TBD</description>
      <remarks>
         <p>To be validated as a natural number (integer &gt;= 1)</p>
      </remarks>
   </define-field>
   
   <define-assembly name="component">
      <formal-name>Component</formal-name>
      <description>A defined component that can be part of an implemented system.</description>
      <json-key flag-name="id"/>
      <flag name="id" as-type="NCName" required="yes">
         <formal-name>Component Identifier</formal-name>
         <description>A unique identifier for a component.</description>
      </flag>
      <flag name="name" as-type="string" required="yes">
         <formal-name>Component Name</formal-name>
         <description>The component's human-readable name.</description>
      </flag>
      <flag ref="component-type" required="yes"/>
      <model>
         <field ref="description" min-occurs="1" in-xml="WITH-WRAPPER"/>
         <field ref="status" min-occurs="1" in-xml="WITH-WRAPPER">
            <flag ref="state">
               <allowed-values>
                  <enum value="under-development">The component is being designed, developed, or implemented.</enum>
                  <enum value="operational">The component is currently operational and is available for use in the system.</enum>
                  <enum value="disposition">The component is no longer operational.</enum>
                  <enum value="other">Some other state.</enum>
               </allowed-values>
            </flag>
         </field>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
            <flag ref="name">
               <allowed-values allow-other="yes">
                  <enum value="version">The version of the component.</enum>
                  <enum value="model">The model of the component.</enum>
                  <enum value="date-released">The date the component was released.</enum>
               </allowed-values>
            </flag>
         </field>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links"/>
            <flag ref="rel">
               <allowed-values allow-other="yes">
                  <enum value="depends-on">A reference to another component that this component has a dependency on.</enum>
                  <enum value="validated-by">A reference to another component of type=validation, that is a validation (e.g., FIPS 140-2) for this component</enum>
                  <enum value="proof-of-compliance">A pointer to a validation record (e.g., FIPS 140-2) or other compliance information.</enum>
               </allowed-values>
            </flag>
         </field>
         <assembly ref="supplier" min-occurs="1" max-occurs="unbounded">
            <group-as name="suppliers"/>
            <remarks>
               <p>Multiple suppliers can be used to show the original provider, plus any intermediaries (e.g., resellers).</p>
            </remarks>
         </assembly>
         <!-- TODO: Need a way to always provide a role, but optionally provide a party. The party may be associated in the inventory item. -->
         <assembly ref="responsible-party" max-occurs="unbounded">
            <group-as name="responsible-parties" in-json="BY_KEY"/>
         </assembly>
<!--         <assembly ref="component-relationship" max-occurs="unbounded">
            <group-as name="component-relationships" in-json="BY_KEY"/>
         </assembly>
-->         <field ref="remarks" in-xml="WITH-WRAPPER"/>
      </model>
      <remarks>
         <p>Components may be products, services, APIs, policies, processes, plans, guidance,
            standards, or other tangible items that enable security and/or privacy.</p>
         <p>The <code>type</code> indicates which of these component types is represented.</p>
         <p>A group of components may be aggregated into a <code>capability</code>. For example, am account management capability that consists of an account management process, and a Lightweight Directory Access Protocol (LDAP) software implementation.</p>
         <p>Capabilities are expressed by combining one or more components.</p>
      </remarks>
   </define-assembly>
   
   <define-assembly name="service">
      <!-- TODO: This is an instantitation of a service component -->
      <!-- TODO: Consider adding link relationships for used-by and provided-by -->
      <!-- TODO: Add field for use -->
      <formal-name>Service</formal-name>
      <description>Information about an individual service within the
			system.</description>
      <flag ref="id"/>
      <flag ref="name"/>
      <model>
         <assembly ref="protocol" max-occurs="unbounded">
            <!-- TODO: protocol (tcp/UDP), port range, service name, purpose, used by -->
            <group-as name="ssp-protocol"/>
         </assembly>
         <field ref="purpose"/>
<!--         <assembly ref="used-by-component" max-occurs="unbounded">
            <group-as name="used-by-components" in-json="SINGLETON_OR_ARRAY"/>
         </assembly>
-->      </model>
      <example/>
   </define-assembly>
   <define-assembly name="protocol">
      <formal-name>Protocol</formal-name>
      <description>Information about the protocol used to provide a service.</description>
      <flag ref="name"/>
      <model>
         <field ref="port-range" max-occurs="unbounded">
            <group-as name="port-ranges"/>
         </field>
      </model>
      <example/>
   </define-assembly>
   <define-field name="port-range">
      <formal-name>Port Range</formal-name>
      <description>TBD</description>
      <flag ref="start"/>
      <flag ref="end"/>
      <flag ref="transport"/>
      <remarks>
         <p>To be validated as a natural number (integer &gt;= 1)</p>
      </remarks>
   </define-field>
   <define-field name="purpose" as-type="markup-line">
      <formal-name>Purpose</formal-name>
      <description>Describes the purpose for the service within the system.</description>
   </define-field>

   <define-assembly name="interconnection">
      <!-- TODO: NEED A PHONE CALL WITH BRIAN TO WORK OUT PROPERTIES -->
      <!-- TODO: provide a mechanism to reference another OSCAL SSP or other documentation. -->
      <!-- TODO: provide a mechanism to reference the ISA. -->
      <formal-name>Interconnection</formal-name>
      <description>Details on an individual system interconnection.</description>
      <flag ref="id"/>
      <model>
         <field ref="external-system-name"/>
         <field ref="external-system-org"/>
         <field ref="isa-authorization" max-occurs="unbounded">
            <group-as name="isa-authorizations"/>
         </field>
         <field ref="isa-name"/>
         <field ref="isa-date"/>
      </model>
      <remarks>
         <p>If there is at least one interconnecton element, the system-interconnections element
				should be "yes".</p>
      </remarks>
      <example/>
   </define-assembly>
   <define-field name="external-system-name" as-type="string">
      <formal-name>External System Name</formal-name>
      <description>TBD</description>
   </define-field>
   <define-field name="external-system-org" as-type="string">
      <formal-name>External System Organization</formal-name>
      <description>TBD</description>
   </define-field>
   <define-field name="isa-authorization">
      <formal-name>ISA Authorization</formal-name>
      <description>Name of the individual who authorized the Interconnection Security Agreement
			(ISA).</description>
   </define-field>
   <define-field name="isa-name" as-type="string">
      <formal-name>ISA Name</formal-name>
      <description>Title of the Interconnection Security Agreement (ISA).</description>
   </define-field>
   <define-field name="isa-date" as-type="string">
      <formal-name>ISA Date</formal-name>
      <description>Date of the Interconnection Security Agreement (ISA).</description>
   </define-field>
   <define-field name="vendor" as-type="string">
      <formal-name>Vendor</formal-name>
      <description>TBD</description>
      <flag ref="id"/>
      <flag ref="type"/>
   </define-field>

   <define-field name="ip-address" as-type="string">
      <formal-name>Internet Protocol Address</formal-name>
      <description>Use the @type flag to deisgnate IPv4 or IPv6.</description>
      <flag ref="type"/>
   </define-field>
   <define-assembly name="system-inventory">
      <formal-name>System Inventory</formal-name>
      <description>TBD</description>
      <model>
         <assembly ref="inventory-item" min-occurs="1" max-occurs="unbounded">
            <group-as name="inventory-items"/>
         </assembly>
        <field ref="remarks" in-xml="WITH-WRAPPER"/>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="inventory-item">
      <!-- TODO: NEED A PHONE CALL WITH BRIAN TO WORK OUT PROPERTIES -->
      <formal-name>Inventory Item</formal-name>
      <description>TBD</description>
      <flag ref="id" required="yes"/>
      <flag ref="virtual"/>
      <flag ref="public"/>
      <model>
         <field ref="ip-address" max-occurs="unbounded">
            <group-as name="ip-addresses"/>
         </field>
         <field ref="dns-name" max-occurs="unbounded">
            <group-as name="dns-names"/>
         </field>
         <assembly ref="host-item" max-occurs="unbounded">
            <group-as name="ssp-host-item"/>
         </assembly>
         <assembly ref="software-item" max-occurs="unbounded">
            <group-as name="ssp-software-item"/>
         </assembly>
         <field ref="serial-no"/>
         <field ref="network-id" max-occurs="unbounded">
            <group-as name="network-ids"/>
         </field>
         <assembly ref="responsible-party" max-occurs="unbounded">
            <group-as name="responsible-parties" in-json="BY_KEY"/>
         </assembly>
<!--         <assembly ref="implemented-component" max-occurs="unbounded">
            <group-as name="implemented-components" in-json="BY_KEY"/>
         </assembly>
-->         <field ref="remarks" in-xml="WITH-WRAPPER"/>
      </model>
      <example/>
   </define-assembly>
   
   <define-assembly name="responsible-party">
      <formal-name>Responsible Party</formal-name>
      <description>A reference to an organization or person assigned a referenced system role that is responsible for the containing inventory item.</description>
      <json-key flag-name="system-role-id"/>
      <flag name="system-role-id" required="yes" as-type="NCName">
         <formal-name>Responsible System Role</formal-name>
         <description>The system role that is responsible.</description>
      </flag>
      <model>
         <field ref="party-id" min-occurs="1" max-occurs="unbounded">
            <group-as name="party-ids"/>
         </field>
      </model>
   </define-assembly>
   <define-field name="system-role-id" as-type="NCName">
      <formal-name>System Role Identifier Reference</formal-name>
      <description>A reference to a system role defined within this document.</description>
   </define-field>
   <define-field name="dns-name" as-type="string">
      <formal-name>Network Name</formal-name>
      <description>If available, state the DNS name or URL of the inventory item. This can be left
			blank if one does not exist, or it is a dynamic field.</description>
   </define-field>
   <define-assembly name="host-item">
      <formal-name>Host Item</formal-name>
      <description>TBD</description>
      <model>
         <!-- TODO: replace these with properties? -->
         <field ref="netbios-name" max-occurs="unbounded">
            <group-as name="netbios-names"/>
         </field>
         <field ref="mac-address" max-occurs="unbounded">
            <group-as name="mac-addresses"/>
         </field>
         <field ref="authenticated-scan" max-occurs="unbounded">
            <group-as name="authenticated-scans"/>
         </field>
         <field ref="baseline-template" max-occurs="unbounded">
            <group-as name="baseline-templates"/>
         </field>
         <field ref="os-name" max-occurs="unbounded">
            <group-as name="os-names"/>
         </field>
         <field ref="os-version" max-occurs="unbounded">
            <group-as name="os-versions"/>
         </field>
         <field ref="location" max-occurs="unbounded">
            <group-as name="locations"/>
         </field>
         <field ref="asset-type" max-occurs="unbounded">
            <group-as name="asset-types"/>
         </field>
         <!-- TODO: use supplier? -->
         <field ref="vendor" max-occurs="unbounded">
            <group-as name="vendors"/>
         </field>
         <field ref="hardware-model" max-occurs="unbounded">
            <group-as name="hardware-models"/>
         </field>
         <field ref="scanned" max-occurs="unbounded">
            <group-as name="ssp-scanned"/>
         </field>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
      </model>
      <remarks>
         <p>Required for physical or virtual machines, network components, and similar
				objects.</p>
      </remarks>
      <example/>
   </define-assembly>
   <define-field name="netbios-name">
      <formal-name>NetBIOS Name</formal-name>
      <description>If available, state the NetBIOS name of the inventory item. This can be omitted
			if one does not exist, or it is a dynamic field.</description>
   </define-field>
   <define-field name="mac-address" as-type="string">
      <formal-name>Media Access Control (MAC) Address</formal-name>
      <description>If available, state the MAC Address of the inventory item. This can be left
			blank if one does not exist, or it is a dynamic field.</description>
   </define-field>
   <define-field name="os-name" as-type="string">
      <formal-name>Operating System Name</formal-name>
      <description>TBD</description>
      <remarks>
         <p>If the @component-id flag is provided in the inventory-item element, this can be
				derived from the component information.</p>
      </remarks>
   </define-field>
   <define-field name="os-version" as-type="string">
      <formal-name>Operating System Version Number</formal-name>
      <description>TBD</description>
      <remarks>
         <p>If the @component-id flag is provided in the inventory-item element, this can be
				derived from the component information.</p>
      </remarks>
   </define-field>
   <define-field name="location">
      <formal-name>Location of the Asset</formal-name>
      <description>Physical location of hardware. Could include Data Center ID, Cage#, Rack# or
			other meaningful location identifiers.</description>
   </define-field>
   <define-field name="asset-type" as-type="string">
      <formal-name>Asset Type</formal-name>
      <description>Simple description of the asset's function (e.g., Router, Storage Array, DNS
			Server, etc.) Do not use vendor or product names here.</description>
   </define-field>
   <define-field name="hardware-model" as-type="string">
      <formal-name>Hardware Model</formal-name>
      <description>Model number of the hardware.</description>
      <remarks>
         <p>If the @component-id flag is provided in the inventory-item element, this can be
				derived from the component information.</p>
      </remarks>
   </define-field>
   <define-field name="authenticated-scan" as-type="boolean">
      <formal-name>Authenticated Scan</formal-name>
      <description>Indicate whether this asset is planned for authenticated
			scanning.</description>
   </define-field>
   <define-assembly name="software-item">
      <formal-name>Software Item</formal-name>
      <description>TBD</description>
      <model>
         <!-- TODO: replace these with properties? -->
         <field ref="vendor" max-occurs="unbounded">
            <group-as name="vendors"/>
         </field>
         <field ref="software-name" max-occurs="unbounded">
            <group-as name="software-names"/>
         </field>
         <field ref="software-version" max-occurs="unbounded">
            <group-as name="software-versions"/>
         </field>
         <field ref="software-patch-level" max-occurs="unbounded">
            <group-as name="software-patch-levels"/>
         </field>
         <field ref="function" max-occurs="unbounded">
            <group-as name="functions"/>
         </field>
      </model>
      <remarks>
         <p>Required for software that runs on a host-item, such as a web server or database application.</p>
      </remarks>
      <example/>
   </define-assembly>
   <define-field name="software-name" as-type="string">
      <formal-name>Software Product Name</formal-name>
      <description>TBD</description>
      <remarks>
         <p>If the @component-id flag is provided in the inventory-item element, this can be
				derived from the component information.</p>
      </remarks>
   </define-field>
   <define-field name="software-version" as-type="string">
      <formal-name>Software Version Number</formal-name>
      <description>TBD</description>
      <remarks>
         <p>If the @component-id flag is provided in the inventory-item element, this can be
				derived from the component information.</p>
      </remarks>
   </define-field>
   <define-field name="software-patch-level" as-type="string">
      <formal-name>Software Patch Level (If applicable)</formal-name>
      <description>TBD</description>
      <remarks>
         <p>If the @component-id flag is provided in the inventory-item element, this can be
				derived from the component information.</p>
      </remarks>
   </define-field>
   <define-field name="function" as-type="string">
      <formal-name>Function</formal-name>
      <description>TBD</description>
      <remarks>
         <p>If the @component-id flag is provided in the inventory-item element, this can be
				derived from the component information.</p>
      </remarks>
   </define-field>
   <define-field name="serial-no" as-type="string">
      <formal-name>Serial Number</formal-name>
      <description>Product serial number or internal asset tag number.</description>
   </define-field>
   <define-field name="network-id" as-type="string">
      <formal-name>Network ID</formal-name>
      <description>Virtual LAN or Network ID.</description>
   </define-field>


   <define-assembly name="control-implementation">
      <formal-name>Control Implementation</formal-name>
      <description>Defines how the system (as a whole) supports a set of controls.</description>
      <model>
         <field ref="description" min-occurs="1"/>
         <assembly ref="implemented-requirement" min-occurs="1" max-occurs="unbounded">
            <group-as name="implemented-requirements"/>
         </assembly>
      </model>
   </define-assembly>
   
   <define-assembly name="implemented-requirement">
      <formal-name>Control-based Requirement</formal-name>
      <description>TBD</description>
      <flag ref="id"/>
      <flag ref="control-id" required="yes"/>
      <model>
         <field ref="description"/>
         <field ref="role-id" max-occurs="unbounded">
            <description>The role responsible for the control implementation.</description>
            <group-as name="system-role-ids"/>
         </field>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links"/>
            <!-- TODO: Model specific link relationships -->
         </field>
<!--         <assembly ref="by-component" max-occurs="unbounded">
            <group-as name="by-components" in-json="BY_KEY"/>
         </assembly>
         <assembly ref="by-capability" max-occurs="unbounded">
            <group-as name="by-capabilities" in-json="BY_KEY"/>
         </assembly>
-->         <assembly ref="set-param" max-occurs="unbounded">
            <group-as name="set-params" in-json="BY_KEY"/>
         </assembly>
         <assembly ref="statement" max-occurs="unbounded">
            <group-as name="statements" in-json="BY_KEY"/>
         </assembly>
         <!--            <assembly ref="using"/>
-->            <!-- TODO: Implement parameters -->
         <field ref="remarks" in-xml="WITH-WRAPPER"/>
      </model>
   </define-assembly>
   
   <define-assembly name="statement">
      <formal-name>Specific Statement</formal-name>
      <description>Describes which specific statements are addressed by a requirement, by pointing to a speific requirement statement within a control.</description>
      <json-key flag-name="statement-id"/>
      <flag ref="statement-id">
         <description>A reference to the specific implemented statement associated with a control.</description>
      </flag>
      <model>
         <field ref="description"/>
         <field ref="system-role-id" max-occurs="unbounded">
            <description>The system role responsible for the control implementation.</description>
            <group-as name="role-ids"/>
         </field>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties"/>
         </field>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links"/>
            <!-- TODO: Model specific link relationships -->
         </field>
         <!--            <assembly ref="using"/>
-->            <!-- TODO: Implement parameters -->
<!--         <assembly ref="by-component" max-occurs="unbounded">
            <group-as name="by-components" in-json="BY_KEY"/>
         </assembly>
         <assembly ref="by-capability" max-occurs="unbounded">
            <group-as name="by-capabilities" in-json="BY_KEY"/>
         </assembly>
-->         <field ref="remarks" in-xml="WITH-WRAPPER"/>
      </model>
   </define-assembly>
   


   <define-assembly name="set-param">
      <formal-name>Set Parameter Value</formal-name>
      <description>Identifies the parameter that will be filled in by the enclosed value
			element.</description>
     <json-key flag-name="param-id"/>
      <flag ref="param-id" required="yes"/>
<!--      <flag ref="target" as-type="string"/>
-->      <model>
         <field ref="value" min-occurs="1"/>
      </model>
      <example/>
   </define-assembly>
   <define-field name="value" as-type="string">
      <formal-name>Value</formal-name>
      <description>The phrase or string that fills-in the parameter and completes the requirement
			statement.</description>
   </define-field>
   <!-- ===== FLAGS ===== -->
   <define-flag name="nist-id" as-type="string">
      <formal-name>NIST 800-60 Information Type Identifier</formal-name>
      <description>Pointer to the information type in NIST SP 800-60.</description>
   </define-flag>
   <define-flag name="param-id" as-type="NCName">
      <formal-name>Parameter ID</formal-name>
      <description>Points to a parameter within a control, to which the contained value will be
			assigned.</description>
      <example>
         <set-param xmlns="http://csrc.nist.gov/ns/oscal/example" param-id="ac-2_prm_2">
            <enum>System ISSO</enum>
         </set-param>
      </example>
   </define-flag>
   <define-flag name="start" as-type="nonNegativeInteger">
      <formal-name>Start</formal-name>
      <description>Indicates the starting port number in a port range.</description>
      <remarks>
         <p>Should be a number within a permitted range</p>
      </remarks>
      <example>
         <service xmlns="http://csrc.nist.gov/ns/oscal/example"
                  id="svc-01"
                  name="Domain Name Service (DNS) Lookup">
            <protocol name="dns">
               <port-range start="53" end="53" transport="tcp"/>
            </protocol>
         </service>
      </example>
   </define-flag>
   <define-flag name="end" as-type="nonNegativeInteger">
      <formal-name>End</formal-name>
      <description>Indicates the ending port number in a port range.</description>
      <remarks>
         <p>Should be a number within a permitted range</p>
      </remarks>
      <example>
         <service xmlns="http://csrc.nist.gov/ns/oscal/example"
                  id="svc-01"
                  name="Domain Name Service (DNS) Lookup">
            <protocol name="dns">
               <port-range start="53" end="53" transport="tcp"/>
            </protocol>
         </service>
      </example>
   </define-flag>
   <define-flag name="transport" as-type="string">
      <formal-name>Transport</formal-name>
      <description>Indicates the transport type.</description>
      <example>
         <service xmlns="http://csrc.nist.gov/ns/oscal/example"
                  id="svc-01"
                  name="Domain Name Service (DNS) Lookup">
            <protocol name="dns">
               <port-range start="53" end="53" transport="tcp"/>
            </protocol>
         </service>
      </example>
   </define-flag>
   <define-flag name="public" as-type="boolean">
      <formal-name>Public</formal-name>
      <description>Designates an asset as either publicly accessible (="yes") or not
			(="no").</description>
      <example/>
   </define-flag>
   <define-flag name="virtual" as-type="boolean">
      <formal-name>Virtual</formal-name>
      <description>Designates an asset as either virtual (="yes") or physical
			(="no").</description>
      <example/>
   </define-flag>
   <define-flag name="external" as-type="boolean">
      <formal-name>external</formal-name>
      <description>TBD. If not provided, the default is 'false'.</description>
   </define-flag>
   <define-flag name="access" as-type="string">
      <formal-name>access</formal-name>
      <description>TBD</description>
   </define-flag>
   <define-flag name="sensitivity-level" as-type="string">
      <formal-name>sensitivity-level</formal-name>
      <description>TBD</description>
   </define-flag>
   <define-field name="baseline-template">
      <formal-name>baseline-template</formal-name>
      <description>TBD</description>
   </define-field>
   <define-field name="scanned">
      <formal-name>scanned</formal-name>
      <description>TBD</description>
   </define-field>
</METASCHEMA>
