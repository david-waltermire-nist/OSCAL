<?xml version="1.0" encoding="UTF-8"?>
<!-- ** NOTES ** 
- Need to check latest FR SSP template for "Privacy Impact Designation". 
  Was it dropped in latest template, or is it missing from schema?
-->
<!-- OSCAL Implementation Layer: System Security Plan (SSP) METASCHEMA -->
<!-- validate with XSD and Schematron (linked) -->
<?xml-model href="../../build/metaschema/lib/metaschema-check.sch" type="application/xml" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<?xml-stylesheet type="text/xsl" href="metaschema-browser.xsl"?>
<?xml-stylesheet type="text/css" href="../../build/metaschema/lib/metaschema-author.css"?>
<METASCHEMA xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
            xmlns="http://csrc.nist.gov/ns/oscal/metaschema/1.0"
            xmlns:o="http://csrc.nist.gov/ns/oscal/1.0"
            xsi:schemaLocation="http://csrc.nist.gov/ns/oscal/metaschema/1.0 ../../build/metaschema/lib/metaschema.xsd"
            root="system-security-plan">
   <schema-name>OSCAL System Security Plan (SSP) Format</schema-name>
   <schema-version>1.0-milestone1</schema-version>
   <short-name>oscal-ssp</short-name>
   <namespace>urn:OSCAL-SSP-metaschema</namespace>
   <remarks>
      <p>The OSCAL Control SSP format can be used to describe the information typically specified
			in a FedRAMP system security plan. The root of the Control Catalog format is
			<code>system_security_plan</code>.</p>
      <p>An XML Schema is <a href="https://raw.githubusercontent.com/usnistgov/OSCAL/master/schema/xml/oscal-ssp-schema.xsd">provided</a> for the OSCAL SSP XML model.</p>
   </remarks>
   <!-- IMPORT STATEMENTS -->
   <import href="oscal_metadata_metaschema.xml"/>
   <import href="oscal_component_metaschema.xml"/>
   <!-- TOP LEVEL ASSEMBLY -->
   <define-assembly name="system-security-plan">
      <formal-name>System Security Plan (SSP)</formal-name>
      <description/>
      <flag ref="id" as-type="ID" required="yes"/>
      <model><!-- 
			<field named="title" required="yes"/>
			<field named="version" required="yes"/>
			<field named="date" required="yes"/>
			 -->
         <assembly ref="metadata"/>
         <assembly ref="import-profile"/>
         <assembly ref="system-characteristics">
            <group-as name="ssp-system-characteristics"/>
         </assembly>
         <assembly ref="system-implementation">
            <group-as name="ssp-system-implementation"/>
         </assembly>
         <assembly ref="control-implementation">
            <group-as name="ssp-control-implementation"/>
         </assembly>
         <assembly ref="references"/>
         <assembly ref="attachment"/>
         <assembly ref="back-matter"/>
      </model>
      <example/>
   </define-assembly>
   <!-- Profile Import -->
   <define-assembly name="import-profile">
      <formal-name>Import profile</formal-name>
      <description>Used to import the OSCAL profile representing the systems control baseline.</description>
      <flag ref="href"/>
      <model>
         <field ref="prose"/>
      </model>
   </define-assembly>
   <!-- SYSTEM CHARACTERISTICS -->
   <define-assembly name="system-characteristics">
      <formal-name>System Characteristics</formal-name>
      <description>Contains the characteristics of the system, such as its name, purpose, and
			security impact level.</description>
      <model>
         <field ref="system-id" min-occurs="1"/>
         <field ref="system-name" min-occurs="1"/>
         <field ref="system-name-short"/>
         <assembly ref="description" min-occurs="1"/>
         <field ref="security-sensitivity-level" min-occurs="1"/>
         <assembly ref="system-information" min-occurs="1">
            <group-as name="ssp-system-information"/>
         </assembly>
         <assembly ref="security-impact-level" min-occurs="1">
            <group-as name="ssp-security-impact-level"/>
         </assembly>
         <assembly ref="security-eauth" min-occurs="1">
            <group-as name="ssp-security-eauth"/>
         </assembly>
         <field ref="status" min-occurs="1"/>
         <!-- TODO: consider other (below) as a child of "status" -->
         <field ref="status-other-description"/>
         <field ref="deployment-model" min-occurs="1"/>
         <!-- TODO: consider other (below) as a child of "status" -->
         <field ref="deployment-model-other-description"/>
         <field ref="service-model" min-occurs="1" max-occurs="unbounded">
            <group-as name="service-models"/>
         </field>
         <!-- TODO: consider other (below) as a child of "status" -->
         <field ref="service-model-other-description" max-occurs="unbounded">
            <group-as name="service-model-descriptions"/>
         </field>
         <assembly ref="leveraged-authorizations">
            <group-as name="ssp-leveraged-authorizations"/>
         </assembly>
         <assembly ref="authorization-boundary">
            <group-as name="ssp-authorization-boundary"/>
         </assembly>
         <assembly ref="network-architecture">
            <group-as name="ssp-network-architecture"/>
         </assembly>
         <assembly ref="data-flow">
            <group-as name="ssp-data-flow"/>
         </assembly>
         <assembly ref="users">
            <group-as name="ssp-users"/>
         </assembly>
      </model>
      <example/>
   </define-assembly>
   <define-field name="system-id" as-type="string">
      <formal-name>System Identification</formal-name>
      <description/>
      <flag ref="type" as-type="string"/>
   </define-field>
   <define-field name="system-name" as-type="string">
      <formal-name>System Name (Full)</formal-name>
      <description/>
   </define-field>
   <define-field name="system-name-short" as-type="string">
      <formal-name>System Name (Short)</formal-name>
      <description/>
   </define-field>
   <define-assembly name="description">
      <formal-name>Description</formal-name>
      <description>A free-text description of the system.</description>
      <model>
         <field ref="prose"/>
      </model>
   </define-assembly>
   <define-field name="security-sensitivity-level" as-type="string">
      <formal-name/>
      <description/>
   </define-field>
   <define-assembly name="system-information">
      <formal-name>System Information</formal-name>
      <description>Contains details about all types of information stored, processed, or
			transmitted by the system, such as privacy information, and NIST 800-60 information
			types.</description>
      <model>
         <assembly ref="information-type" min-occurs="1" max-occurs="unbounded">
            <group-as name="ssp-information-type"/>
         </assembly>
         <assembly ref="designations" min-occurs="1" max-occurs="unbounded">
            <group-as name="ssp-designations"/>
         </assembly>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="designations">
      <formal-name>System Information Designations</formal-name>
      <description>Used to enumerate all special information type designations that may be required by a specific organization or compliance regiem, such as privacy impact information (PII), or payment card information (PCI).</description>
      <model>
         <assembly ref="designation" max-occurs="unbounded">
            <group-as name="ssp-designation"/>
         </assembly>
      </model>
      <example>
         <designations xmlns="http://csrc.nist.gov/ns/oscal/example">
            <designation id="pii">
               <declaration>true</declaration>
            </designation>
            <designation id="pci">
               <declaration>false</declaration>
            </designation>
            <designation id="hipaa">
               <declaration>false</declaration>
            </designation>
            <designation id="sbu">
               <declaration>false</declaration>
            </designation>
         </designations>
      </example>
   </define-assembly>
   <define-assembly name="designation">
      <formal-name>System Information Designation</formal-name>
      <description>Used when a specific organization or compliance regiem requires certain information types to be explicitly cited, such as privacy impact information (PII), or payment card information (PCI).</description>
      <flag ref="id" as-type="ID"/>
      <model>
         <field ref="title"/>
         <field ref="declaration"/>
         <assembly ref="qualifiers" max-occurs="unbounded">
            <group-as name="ssp-qualifiers"/>
         </assembly>
      </model>
      <example>
         <designation xmlns="http://csrc.nist.gov/ns/oscal/example" id="pii">
            <title>A Privacy Sensitive System</title>
            <declaration>false</declaration>
         </designation>
      </example>
   </define-assembly>
   <define-field name="declaration" as-type="boolean">
      <formal-name>Declaration</formal-name>
      <description>Identifies whether a specific designation applies to this system.</description>
      <example>
         <designation xmlns="http://csrc.nist.gov/ns/oscal/example" id="pii">
            <title>A Privacy Sensitive System</title>
            <declaration>false</declaration>
         </designation>
      </example>
   </define-field>
   <define-assembly name="qualifiers">
      <formal-name>Information Designation Qualifiers</formal-name>
      <description>A list of questions about the system that contribute to the establishment of a designation, such as the FedRAMP privacy threshold analysis questions.</description>
      <model>
         <assembly ref="qualifier" max-occurs="unbounded">
            <group-as name="ssp-qualifiers"/>
         </assembly>
      </model>
      <example>
         <qualifiers xmlns="http://csrc.nist.gov/ns/oscal/example">
            <qualifier id="pta-01">
               <question>Does the ISA collect, maintain, or share PII in any identifiable form?</question>
               <response>no</response>
            </qualifier>
         </qualifiers>
      </example>
   </define-assembly>
   <define-assembly name="qualifier">
      <formal-name>Individual Information Designation Qualifier</formal-name>
      <description>An individual questions about the system that contributes to the establishment of a designation, such as a FedRAMP privacy threshold analysis question.</description>
      <flag ref="id" as-type="ID"/>
      <model>
         <field ref="qual-question"/>
         <field ref="qual-response"/>
         <field ref="qual-notes"/>
      </model>
      <example>
         <qualifiers xmlns="http://csrc.nist.gov/ns/oscal/example">
            <qualifier id="pta-01">
               <qual-question>Is there a Privacy Act System of Records Notice (SORN) for this ISA system?</qual-question>
               <qual-response>yes</qual-response>
               <qual-notes>[SORN ID#]</qual-notes>
            </qualifier>
         </qualifiers>
      </example>
   </define-assembly>
   <define-field name="qual-question" as-type="string">
      <formal-name>Qualifier Question</formal-name>
      <description>A question that must be answered about this system.</description>
      <example>
         <qualifiers xmlns="http://csrc.nist.gov/ns/oscal/example">
            <qualifier id="pta-01">
               <qual-question>Is there a Privacy Act System of Records Notice (SORN) for this ISA system?</qual-question>
               <qual-response>yes</qual-response>
               <qual-notes>[SORN ID#]</qual-notes>
            </qualifier>
         </qualifiers>
      </example>
   </define-field>
   <define-field name="qual-response" as-type="boolean">
      <formal-name>Qualifier Question Response</formal-name>
      <description>The response to the question.</description>
      <example>
         <qualifiers xmlns="http://csrc.nist.gov/ns/oscal/example">
            <qualifier id="pta-01">
               <qual-question>Is there a Privacy Act System of Records Notice (SORN) for this ISA system?</qual-question>
               <qual-response>yes</qual-response>
               <qual-notes>[SORN ID#]</qual-notes>
            </qualifier>
         </qualifiers>
      </example>
   </define-field>
   <define-field name="qual-notes" as-type="string">
      <formal-name>Qualifier Question Response Notes</formal-name>
      <description>Additional information about the response to the question.</description>
      <example>
         <qualifiers xmlns="http://csrc.nist.gov/ns/oscal/example">
            <qualifier id="pta-01">
               <qual-question>Is there a Privacy Act System of Records Notice (SORN) for this ISA system?</qual-question>
               <qual-response>yes</qual-response>
               <qual-notes>[SORN ID#]</qual-notes>
            </qualifier>
         </qualifiers>
      </example>
   </define-field>
   <define-assembly name="information-type">
      <formal-name>Information Type</formal-name>
      <description>Contains details about one type of information stored, processed, or
			transmitted by the system, such as privacy information, and NIST 800-60 information
			types.</description>
      <flag ref="id" as-type="ID"/>
      <flag ref="nist-id" as-type="string"/>
      <model>
         <assembly ref="description"/>
         <assembly ref="confidentiality-impact">
            <group-as name="ssp-confidentiality-impact"/>
         </assembly>
         <assembly ref="integrity-impact">
            <group-as name="ssp-integrity-impact"/>
         </assembly>
         <assembly ref="availability-impact">
            <group-as name="ssp-availability-impact"/>
         </assembly>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="confidentiality-impact">
      <formal-name>Confidentiality Impact Level</formal-name>
      <description/>
      <model>
         <field ref="base"/>
         <field ref="selected"/>
         <field ref="adjustment-justification"/>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="integrity-impact">
      <formal-name>Integrity Impact Level</formal-name>
      <description/>
      <model>
         <field ref="base"/>
         <field ref="selected"/>
         <field ref="adjustment-justification"/>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="availability-impact">
      <formal-name>Availability Impact Level</formal-name>
      <description/>
      <model>
         <field ref="base"/>
         <field ref="selected"/>
         <field ref="adjustment-justification"/>
      </model>
      <example/>
   </define-assembly>
   <define-field name="base" as-type="string">
      <formal-name>Base Level (Confidentiality, Integrity, or Availability)</formal-name>
      <description>The prescribed base (Confidentiality, Integrity, or Availability) security
			impact level.</description>
   </define-field>
   <define-field name="selected" as-type="string">
      <formal-name>Selected Level (Confidentiality, Integrity, or Availability)</formal-name>
      <description>The selected (Confidentiality, Integrity, or Availability) security impact
			level.</description>
   </define-field>
   <define-field name="adjustment-justification" as-type="string">
      <formal-name>Adjustment Justification</formal-name>
      <description>If the selected security level is different from the base security level, this
			contains the justificaiton for the change.</description>
   </define-field>
   <define-assembly name="security-impact-level">
      <formal-name>Security Impact Level</formal-name>
      <description/>
      <model>
         <field ref="security-objective-confidentiality"/>
         <field ref="security-objective-integrity"/>
         <field ref="security-objective-availability"/>
      </model>
      <example/>
   </define-assembly>
   <define-field name="security-objective-confidentiality" as-type="string">
      <formal-name>Security Objective (Confidentiality)</formal-name>
      <description/>
   </define-field>
   <define-field name="security-objective-integrity" as-type="string">
      <formal-name>Security Objective (Integrity)</formal-name>
      <description/>
   </define-field>
   <define-field name="security-objective-availability" as-type="string">
      <formal-name>Security Objective (Availability)</formal-name>
      <description/>
   </define-field>
   <define-assembly name="security-eauth">
      <formal-name>Security Electronic Authentication Level</formal-name>
      <description/>
      <model>
         <field ref="security-auth-ial"/>
         <field ref="security-auth-aal"/>
         <field ref="security-auth-fal"/>
         <field ref="security-eauth-level"/>
      </model>
      <example/>
   </define-assembly>
   <define-field name="security-auth-ial" as-type="string">
      <formal-name>Security Authentication (Identity Assurance Level)</formal-name>
      <description/>
   </define-field>
   <define-field name="security-auth-aal" as-type="string">
      <formal-name>Security Authentication (Authenticator Assurance Level)</formal-name>
      <description/>
   </define-field>
   <define-field name="security-auth-fal" as-type="string">
      <formal-name>Security Authentication (Federation Assurance Level)</formal-name>
      <description/>
   </define-field>
   <define-field name="security-eauth-level" as-type="string">
      <formal-name>Security eAuthentication Level</formal-name>
      <description/>
   </define-field>
   <define-field name="status" as-type="string">
      <formal-name>Status</formal-name>
      <description/>
   </define-field>
   <define-field name="status-other-description" as-type="string">
      <formal-name>Status Description (if Other)</formal-name>
      <description/>
   </define-field>
   <define-field name="deployment-model" as-type="string">
      <formal-name>Deployment Model</formal-name>
      <description/>
   </define-field>
   <define-field name="deployment-model-other-description" as-type="string">
      <formal-name>Deployment Model Description (if Other)</formal-name>
      <description/>
   </define-field>
   <define-field name="service-model" as-type="string">
      <formal-name>Service Model</formal-name>
      <description/>
   </define-field>
   <define-field name="service-model-other-description" as-type="string">
      <formal-name>Service Model Description Other</formal-name>
      <description/>
   </define-field>
   <define-assembly name="leveraged-authorizations">
      <formal-name>Leveraged Authorizations</formal-name>
      <description>All leveraged authorizations for this system.</description>
      <model>
         <assembly ref="leveraged-authorization" max-occurs="unbounded">
            <group-as name="ssp-leveraged-authorization"/>
         </assembly>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="leveraged-authorization">
      <formal-name>Leveraged Authorization</formal-name>
      <description>The details for a single leveraged authorization</description>
      <flag ref="id" as-type="ID"/>
      <model>
         <field ref="leveraged-authorization-name"/>
         <field ref="leveraged-authorization-service-provider"/>
         <field ref="leveraged-authorization-date-granted"/>
      </model>
      <example/>
   </define-assembly>
   <define-field name="leveraged-authorization-name" as-type="string">
      <formal-name>Leveraged system Name</formal-name>
      <description>Name of the leveraged system.</description>
   </define-field>
   <define-field name="leveraged-authorization-service-provider" as-type="string">
      <formal-name>Leveraged System Service Provider Name</formal-name>
      <description>Name of the service provider that manages the leveraged system.</description>
   </define-field>
   <define-field name="leveraged-authorization-date-granted">
      <formal-name>Leveraged System Authorization Date</formal-name>
      <description>The date the leveraged system received its authorization.</description>
      <remarks>
         <p>Value needs to be validated as a date field.</p>
      </remarks>
   </define-field>
   <define-assembly name="authorization-boundary">
      <formal-name>Authorization Boundary</formal-name>
      <description/>
      <model>
         <assembly ref="boundary-diagram" max-occurs="unbounded">
            <group-as name="ssp-boundary-diagram"/>
         </assembly>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="boundary-diagram">
      <formal-name>Boundary Diagram</formal-name>
      <description/>
      <flag ref="id" as-type="ID"/>
      <flag ref="attachment-id" as-type="string"/>
      <model>
         <assembly ref="boundary-description"/>
      </model>
      <remarks>
         <p>The @attachment-id flag references the attachment ID of the boundary diagram.</p>
      </remarks>
      <example/>
   </define-assembly>
   <define-assembly name="boundary-description">
      <formal-name>Boundary Description</formal-name>
      <description/>
      <model>
         <field ref="prose"/>
      </model>
   </define-assembly>
   <define-assembly name="network-architecture">
      <formal-name>Network Architecture Diagrams</formal-name>
      <description/>
      <model>
         <assembly ref="network-diagram" max-occurs="unbounded">
            <group-as name="ssp-network-boundary"/>
         </assembly>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="network-diagram">
      <formal-name>Network Diagram</formal-name>
      <description/>
      <flag ref="id" as-type="ID"/>
      <flag ref="attachment-id" as-type="string"/>
      <model>
         <assembly ref="network-description"/>
      </model>
      <remarks>
         <p>The @attachment-id flag references the attachment ID of the nextwork diagram.</p>
      </remarks>
      <example/>
   </define-assembly>
   <define-assembly name="network-description">
      <formal-name>Network Description</formal-name>
      <description/>
      <model>
         <field ref="prose"/>
      </model>
   </define-assembly>
   <define-assembly name="data-flow">
      <formal-name>Data Flow</formal-name>
      <description/>
      <model>
         <assembly ref="data-flow-diagram" max-occurs="unbounded">
            <group-as name="ssp-data-flow-diagram"/>
         </assembly>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="data-flow-diagram">
      <formal-name>Data Flow Diagram</formal-name>
      <description/>
      <flag ref="id" as-type="ID"/>
      <flag ref="attachment-id" as-type="string"/>
      <model>
         <assembly ref="data-flow-description"/>
      </model>
      <remarks>
         <p>The @attachment-id flag references the attachment ID of the data flow diagram.</p>
      </remarks>
      <example/>
   </define-assembly>
   <define-assembly name="data-flow-description">
      <formal-name>Data Flow Description</formal-name>
      <description/>
      <model>
         <field ref="prose"/>
      </model>
   </define-assembly>
   <!-- **** Need to ensure <users> </users> matches pocs, roles, orgs **** -->
   <define-assembly name="users">
      <formal-name>Users</formal-name>
      <description>Provides all user roles.</description>
      <model>
         <assembly ref="role" max-occurs="unbounded">
            <group-as name="roles"/>
         </assembly>
         <assembly ref="statistics">
            <group-as name="ssp-statistics"/>
         </assembly>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="role">
      <formal-name>Role</formal-name>
      <description>Defining a role to be assigned to a party or agent</description>
      <flag ref="id" as-type="ID" required="yes"/>
      <flag ref="name" as-type="string"/>
      <flag ref="external" as-type="boolean"/>
      <flag ref="access" as-type="string"/>
      <flag ref="sensitivity-level" as-type="string"/>
      <model>
         <field ref="title"/>
         <field ref="short-name"/>
         <field ref="desc"/>
         <!-- The following fields appear in <users><roles>, but not in <metadata><roles> -->
         <field ref="privilege" max-occurs="unbounded">
            <group-as name="privileges"/>
         </field>
         <field ref="responsibility" max-occurs="unbounded">
            <group-as name="responsibilities"/>
         </field>
      </model>
      <remarks>
         <p>Permissible values to be determined closer to the application (e.g. by a receiving
				authority).</p>
      </remarks>
   </define-assembly>
   <define-field name="privilege" as-type="string">
      <formal-name>Privilege</formal-name>
      <description>Identifies the type/level of system privilege for the role. 
			For FedRAMP, the only valid values are "p" (Privileged), "np" (Non-Privileged), or "nla" (No Logical Access).</description>
   </define-field>
   <define-field name="responsibility" as-type="string">
      <formal-name>Responsibility</formal-name>
      <description>Identifies the functions performed by the user role.</description>
   </define-field>
   <define-assembly name="statistics">
      <formal-name>Statistics</formal-name>
      <description>Provides a collection of statistics about users of the system.</description>
      <model>
         <field ref="internal-user-total-current"/>
         <field ref="internal-user-total-future"/>
         <field ref="external-user-total-current"/>
         <field ref="external-user-total-future"/>
      </model>
      <example/>
   </define-assembly>
   <define-field name="internal-user-total-current">
      <formal-name>Total Current Internal Users</formal-name>
      <description/>
      <remarks>
         <p>To be validated as a natural number (integer &gt;= 1)</p>
      </remarks>
   </define-field>
   <define-field name="internal-user-total-future">
      <formal-name>Total Future Internal Users</formal-name>
      <description/>
      <remarks>
         <p>To be validated as a natural number (integer &gt;= 1)</p>
      </remarks>
   </define-field>
   <define-field name="external-user-total-current">
      <formal-name>Total Current External Users</formal-name>
      <description/>
      <remarks>
         <p>To be validated as a natural number (integer &gt;= 1)</p>
      </remarks>
   </define-field>
   <define-field name="external-user-total-future">
      <formal-name>Total Future External Users</formal-name>
      <description/>
      <remarks>
         <p>To be validated as a natural number (integer &gt;= 1)</p>
      </remarks>
   </define-field>
   <!-- SYSTEM IMPLEMENTATION -->
   <define-assembly name="system-implementation">
      <formal-name>System Implementation</formal-name>
      <description>Provides information as to how the system is implemented.</description>
      <model>
         <assembly ref="ports-protocols-services">
            <group-as name="ssp-ports-protocols-services"/>
         </assembly>
         <assembly ref="interconnection" max-occurs="unbounded">
            <group-as name="ssp-interconnection"/>
         </assembly>
         <assembly ref="component" max-occurs="unbounded">
            <group-as name="components" json-behavior="BY_KEY"/>
         </assembly>
         <assembly ref="system-inventory"/>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="ports-protocols-services">
      <formal-name>Ports, Protocols, and Services</formal-name>
      <description>A collection of the ports, protocols, and services used within the
			system.</description>
      <model>
         <assembly ref="service" max-occurs="unbounded">
            <group-as name="ssp-service"/>
         </assembly>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="service">
      <formal-name>Service</formal-name>
      <description>A collection of information about an individual service within the
			system.</description>
      <flag ref="id" as-type="ID"/>
      <flag ref="name" as-type="string"/>
      <model>
         <assembly ref="protocol" max-occurs="unbounded">
            <group-as name="ssp-protocol"/>
         </assembly>
         <field ref="purpose"/>
         <field ref="used-by" max-occurs="unbounded">
            <group-as name="component-users"/>
         </field>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="protocol">
      <formal-name>Protocol</formal-name>
      <description>Information about the protocol used to provide a service.</description>
      <flag ref="name" as-type="string"/>
      <model>
         <field ref="port-range" max-occurs="unbounded">
            <group-as name="port-ranges"/>
         </field>
      </model>
      <example/>
   </define-assembly>
   <define-field name="port-range">
      <formal-name>Port Range</formal-name>
      <description/>
      <flag ref="start" as-type="string"/>
      <flag ref="end" as-type="string"/>
      <flag ref="transport" as-type="string"/>
      <remarks>
         <p>To be validated as a natural number (integer &gt;= 1)</p>
      </remarks>
   </define-field>
   <define-field name="purpose" as-type="markup-line">
      <formal-name>Purpose</formal-name>
      <description>Describes the purpose for the service within the system.</description>
   </define-field>
   <define-field name="used-by" as-type="string">
      <formal-name>Used By</formal-name>
      <description>Identifies the types of system component that uses the service. One entry per
		</description>
   </define-field>
   <!-- Removing this to flatten structure
	<define-assembly name="system-interconnections" group-as="ssp-system-interconnections" show-docs="xml json" required="yes">
		<formal-name>System Interconnections</formal-name>
		<description>All system interconnections.</description>
		<remarks></remarks>
		<model>
			<assemblies named="interconnection" />
		</model>
		<example></example>
	</define-assembly>
	-->
   <define-assembly name="interconnection">
      <formal-name>Interconnection</formal-name>
      <description>Details on an individual system interconnection.</description>
      <flag ref="id" as-type="ID"/>
      <model>
         <field ref="external-system-name"/>
         <field ref="external-system-org"/>
         <field ref="isa-authorization" max-occurs="unbounded">
            <group-as name="isa-authorizations"/>
         </field>
         <field ref="isa-name"/>
         <field ref="isa-date"/>
      </model>
      <remarks>
         <p>If there is at least one interconnecton element, the system-interconnections element
				should be "yes".</p>
      </remarks>
      <example/>
   </define-assembly>
   <define-field name="external-system-name" as-type="string">
      <formal-name>External System Name</formal-name>
      <description/>
   </define-field>
   <define-field name="external-system-org" as-type="string">
      <formal-name>External System Organization</formal-name>
      <description/>
   </define-field>
   <define-field name="isa-authorization">
      <formal-name>ISA Authorization</formal-name>
      <description>Name of the individual who authorized the Interconnection Security Agreement
			(ISA).</description>
   </define-field>
   <define-field name="isa-name" as-type="string">
      <formal-name>ISA Name</formal-name>
      <description>Title of the Interconnection Security Agreement (ISA).</description>
   </define-field>
   <define-field name="isa-date" as-type="string">
      <formal-name>ISA Date</formal-name>
      <description>Date of the Interconnection Security Agreement (ISA).</description>
   </define-field>
   <define-field name="vendor" as-type="string">
      <formal-name>Vendor</formal-name>
      <description>.</description>
      <flag ref="id" as-type="ID"/>
      <flag ref="type" as-type="string"/>
   </define-field>
<!--
   <define-assembly name="characteristics">
      <formal-name>Characteristics</formal-name>
      <description>Component characteristics, assets and configuration information</description>
      <flag ref="context"/>
      <model>
         <field ref="ip-address" max-occurs="unbounded">
            <group-as name="ip-addresses"/>
         </field>
         <assembly ref="service" max-occurs="unbounded">
            <group-as name="ssp-service"/>
         </assembly>
         <field ref="prose"/>
      </model>
      <remarks>
         <p>When context="specification", this describes all security relevant settings in the
        component.</p>
         <p>When context="standard", this describes how to configure the component to meet a
        specific goal, such as compliance with FISMA Moderate, PCI, or GPRD.</p>
         <p>When context="actual", or when no type is listed, this describes the actual
        configuration of the component within a specific system.</p>
      </remarks>
      <example/>
   </define-assembly>
   <define-assembly name="satisfaction">
      <formal-name>Satisfaction</formal-name>
      <description>Describes how the indicated control is satisfied by this
      component</description>
      <flag ref="id" as-type="ID"/>
      <flag ref="context"/>
      <model>
         <field ref="prose"/>
      </model>
      <remarks>
         <p>When context="specification", this describes how the control could be satisfied by
        the component.</p>
         <p>When context="standard", this describes how the security control would be satisfied
        if the component was configured in accordance with the associated characteristics
        provisioning information.</p>
         <p>When context="actual", or when no type is listed, this describes how the control is
        satisfied based on the component's actual deployment within a given system.</p>
      </remarks>
   </define-assembly>
-->
   <define-field name="ip-address" as-type="string">
      <formal-name>Internet Protocol Address</formal-name>
      <description>Use the @type flag to deisgnate IPv4 or IPv6.</description>
      <flag ref="type" as-type="string"/>
   </define-field>
   <define-assembly name="system-inventory">
      <formal-name>System Inventory</formal-name>
      <description>.</description>
      <model>
         <assembly ref="inventory-item" max-occurs="unbounded">
            <group-as name="inventory-items"/>
         </assembly>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="inventory-item">
      <formal-name>Inventory Item</formal-name>
      <description>.</description>
      <flag ref="id" as-type="ID"/>
      <flag ref="component-id" as-type="NCName"/>
      <flag ref="virtual" as-type="boolean"/>
      <flag ref="public" as-type="boolean"/>
      <model>
         <field ref="ip-address" max-occurs="unbounded">
            <group-as name="ip-addresses"/>
         </field>
         <field ref="dns-name" max-occurs="unbounded">
            <group-as name="dns-names"/>
         </field>
         <assembly ref="host-item" max-occurs="unbounded">
            <group-as name="ssp-host-item"/>
         </assembly>
         <assembly ref="software-item" max-occurs="unbounded">
            <group-as name="ssp-software-item"/>
         </assembly>
         <field ref="comments"/>
         <field ref="serial-no"/>
         <field ref="network-id" max-occurs="unbounded">
            <group-as name="network-ids"/>
         </field>
         <field ref="asset-owner" max-occurs="unbounded">
            <group-as name="asset-owners"/>
         </field>
         <field ref="asset-administrator" max-occurs="unbounded">
            <group-as name="asset-administrators"/>
         </field>
      </model>
      <example/>
   </define-assembly>
   <define-field name="dns-name" as-type="string">
      <formal-name>Network Name</formal-name>
      <description>If available, state the DNS name or URL of the inventory item. This can be left
			blank if one does not exist, or it is a dynamic field.</description>
   </define-field>
   <define-assembly name="host-item">
      <formal-name>Host Item</formal-name>
      <description/>
      <model>
         <field ref="netbios-name" max-occurs="unbounded">
            <group-as name="netbios-names"/>
         </field>
         <field ref="mac-address" max-occurs="unbounded">
            <group-as name="mac-addresses"/>
         </field>
         <field ref="authenticated-scan" max-occurs="unbounded">
            <group-as name="authenticated-scans"/>
         </field>
         <field ref="baseline-template" max-occurs="unbounded">
            <group-as name="baseline-templates"/>
         </field>
         <field ref="os-name" max-occurs="unbounded">
            <group-as name="os-names"/>
         </field>
         <field ref="os-version" max-occurs="unbounded">
            <group-as name="os-versions"/>
         </field>
         <field ref="location" max-occurs="unbounded">
            <group-as name="locations"/>
         </field>
         <field ref="asset-type" max-occurs="unbounded">
            <group-as name="asset-types"/>
         </field>
         <field ref="vendor" max-occurs="unbounded">
            <group-as name="vendors"/>
         </field>
         <field ref="hardware-model" max-occurs="unbounded">
            <group-as name="hardware-models"/>
         </field>
         <field ref="scanned" max-occurs="unbounded">
            <group-as name="ssp-scanned"/>
         </field>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties" json-behavior="BY_KEY"/>
         </field>
      </model>
      <remarks>
         <p>Required for physical or virtual machines, network components, and similar
				objects.</p>
      </remarks>
      <example/>
   </define-assembly>
   <define-field name="netbios-name">
      <formal-name>NetBIOS Name</formal-name>
      <description>If available, state the NetBIOS name of the inventory item. This can be omitted
			if one does not exist, or it is a dynamic field.</description>
   </define-field>
   <define-field name="mac-address" as-type="string">
      <formal-name>Media Access Control (MAC) Address</formal-name>
      <description>If available, state the MAC Address of the inventory item. This can be left
			blank if one does not exist, or it is a dynamic field.</description>
   </define-field>
   <define-field name="os-name" as-type="string">
      <formal-name>Operating System Name</formal-name>
      <description>.</description>
      <remarks>
         <p>If the @component-id flag is provided in the inventory-item element, this can be
				derived from the component information.</p>
      </remarks>
   </define-field>
   <define-field name="os-version" as-type="string">
      <formal-name>Operating System Version Number</formal-name>
      <description>.</description>
      <remarks>
         <p>If the @component-id flag is provided in the inventory-item element, this can be
				derived from the component information.</p>
      </remarks>
   </define-field>
   <define-field name="location">
      <formal-name>Location of the Asset</formal-name>
      <description>Physical location of hardware. Could include Data Center ID, Cage#, Rack# or
			other meaningful location identifiers.</description>
   </define-field>
   <define-field name="asset-type" as-type="string">
      <formal-name>Asset Type</formal-name>
      <description>Simple description of the asset's function (e.g., Router, Storage Array, DNS
			Server, etc.) Do not use vendor or product names here.</description>
   </define-field>
   <define-field name="hardware-model" as-type="string">
      <formal-name>Hardware Model</formal-name>
      <description>Model number of the hardware.</description>
      <remarks>
         <p>If the @component-id flag is provided in the inventory-item element, this can be
				derived from the component information.</p>
      </remarks>
   </define-field>
   <define-field name="authenticated-scan" as-type="boolean">
      <formal-name>Authenticated Scan</formal-name>
      <description>Indicate whether this asset is planned for authenticated
			scanning.</description>
   </define-field>
   <define-assembly name="software-item">
      <formal-name>Software Item</formal-name>
      <description/>
      <model>
         <field ref="vendor" max-occurs="unbounded">
            <group-as name="vendors"/>
         </field>
         <field ref="software-name" max-occurs="unbounded">
            <group-as name="software-names"/>
         </field>
         <field ref="software-version" max-occurs="unbounded">
            <group-as name="software-versions"/>
         </field>
         <field ref="software-patch-level" max-occurs="unbounded">
            <group-as name="software-patch-levels"/>
         </field>
         <field ref="function" max-occurs="unbounded">
            <group-as name="functions"/>
         </field>
      </model>
      <remarks>
         <p>Required for software that runs on a host-item, such as a web server or database application.</p>
      </remarks>
      <example/>
   </define-assembly>
   <define-field name="software-name" as-type="string">
      <formal-name>Software Product Name</formal-name>
      <description>.</description>
      <remarks>
         <p>If the @component-id flag is provided in the inventory-item element, this can be
				derived from the component information.</p>
      </remarks>
   </define-field>
   <define-field name="software-version" as-type="string">
      <formal-name>Software Version Number</formal-name>
      <description>.</description>
      <remarks>
         <p>If the @component-id flag is provided in the inventory-item element, this can be
				derived from the component information.</p>
      </remarks>
   </define-field>
   <define-field name="software-patch-level" as-type="string">
      <formal-name>Software Patch Level (If applicable)</formal-name>
      <description>.</description>
      <remarks>
         <p>If the @component-id flag is provided in the inventory-item element, this can be
				derived from the component information.</p>
      </remarks>
   </define-field>
   <define-field name="function" as-type="string">
      <formal-name>Function</formal-name>
      <description>.</description>
      <remarks>
         <p>If the @component-id flag is provided in the inventory-item element, this can be
				derived from the component information.</p>
      </remarks>
   </define-field>
   <define-field name="comments" as-type="string">
      <formal-name>Comments</formal-name>
      <description>Any additional information that could be useful to an auditor or
			reviewer.</description>
   </define-field>
   <define-field name="serial-no" as-type="string">
      <formal-name>Serial Number</formal-name>
      <description>Product serial number or internal asset tag number.</description>
   </define-field>
   <define-field name="network-id" as-type="string">
      <formal-name>Network ID</formal-name>
      <description>Virtual LAN or Network ID.</description>
   </define-field>
   <define-field name="asset-owner" as-type="string">
      <formal-name>Asset Owner</formal-name>
      <description>The individual, title, or role who "owns" the asset on behalf of the
			organization.</description>
      <flag ref="poc-id" as-type="NCName"/>
   </define-field>
   <define-field name="asset-administrator" as-type="string">
      <formal-name>Asset Administrator</formal-name>
      <description>The individual, title, role, or team responsible for operating and maintaining
			the asset.</description>
      <flag ref="poc-id" as-type="NCName"/>
   </define-field>
   <define-assembly name="control-implementation">
      <formal-name>Implementation of Security Control</formal-name>
      <description/>
      <model>
         <assembly ref="control" max-occurs="unbounded">
            <group-as name="controls"/>
         </assembly>
      </model>
      <example/>
   </define-assembly>
   <define-assembly name="control">
      <formal-name>Control Implementation</formal-name>
      <description>Information related to the implementation of an individual
			control.</description>
      <flag ref="class" as-type="NCName"/>
      <flag ref="control-id" as-type="NCName"/>
      <flag ref="href" as-type="uri-reference"/>
      <model>
         <field ref="responsible-role" max-occurs="unbounded">
            <group-as name="ssp-responsible-role"/>
         </field>
         <assembly ref="set-param" max-occurs="unbounded">
            <group-as name="parameter-settings"/>
         </assembly>
         <field ref="prop" max-occurs="unbounded">
            <group-as name="properties" json-behavior="BY_KEY"/>
         </field>
         <assembly ref="control-response" max-occurs="unbounded">
            <group-as name="control-responses"/>
         </assembly>
      </model>
      <example/>
   </define-assembly>
   <define-field name="responsible-role" as-type="string">
      <formal-name>Responsible Role</formal-name>
      <description/>
      <flag ref="role-id" as-type="NCName"/>
   </define-field>
   <define-assembly name="set-param">
      <formal-name>Set Parameter Value</formal-name>
      <description>Identifies the parameter that will be filled in by the enclosed value
			element.</description>
      <flag ref="param-id" as-type="NCName"/>
      <flag ref="target" as-type="string"/>
      <model>
         <field ref="value"/>
      </model>
      <example/>
   </define-assembly>
   <define-field name="value" as-type="string">
      <formal-name>Value</formal-name>
      <description>The phrase or string that fills-in the parameter and completes the requirement
			statement.</description>
   </define-field>
   <define-assembly name="control-response">
      <formal-name>Control Response</formal-name>
      <description>Describes how a control is implemented.</description>
      <flag ref="stmt-id" as-type="NCName"/>
      <model>
         <field ref="prose"/>
      </model>
      <example>
         <response xmlns="http://csrc.nist.gov/ns/oscal/example" target="ac-2_smt.g">
            <p>Response to AC-2 part g.</p>
         </response>
      </example>
   </define-assembly>
   <define-assembly name="references">
      <formal-name>References</formal-name>
      <description> A group of reference descriptions </description>
      <flag ref="id" as-type="ID"/>
      <model>
         <field ref="link" max-occurs="unbounded">
            <group-as name="links"/>
         </field>
         <assembly ref="ref" max-occurs="unbounded">
            <group-as name="refs"/>
         </assembly>
         <any/>
      </model>
   </define-assembly>
   <define-assembly name="ref">
      <formal-name>Reference</formal-name>
      <description> A reference, with one or more citations to standards, related documents, or
			other resources </description>
      <flag ref="id" as-type="ID"/>
      <flag ref="ref-type" as-type="string"/>
      <model>
         <field ref="citation" max-occurs="unbounded">
            <group-as name="citations"/>
         </field>
         <field ref="prose"/>
         <any/>
      </model>
   </define-assembly>
   <define-field as-type="markup-line" name="citation">
      <formal-name>Citation</formal-name>
      <description>Citation of a resource</description>
      <flag ref="id" as-type="ID"/>
      <flag ref="href" as-type="uri-reference"/>
      <remarks>
         <p>Semantics of any contents within citation are implicit, not encoded. To mitigate
				problems establishin matches with bibliograpical databases, it is recommended a
				canonical identifier such as a DOI be provided for any citation.</p>
      </remarks>
   </define-field>
   <define-field name="link" as-type="markup-line">
      <formal-name>Link</formal-name>
      <description> A line or paragraph with a hypertext link </description>
      <flag ref="href" as-type="uri-reference"/>
      <flag ref="rel" as-type="NCName"/>
      <remarks>
         <p>Works like an HTML anchor (<code>a</code>) except this is a line-oriented (block)
				element.</p>
      </remarks>
   </define-field>
   <define-assembly name="attachment">
      <formal-name>Attachments</formal-name>
      <description>.</description>
      <flag ref="id" as-type="ID"/>
      <model>
         <field ref="title"/>
         <assembly ref="description"/>
         <field ref="format"/>
         <field ref="date"/>
         <field ref="version"/>
         <field ref="attachment-type"/>
         <field ref="base64"/>
      </model>
   </define-assembly>
   <define-field name="format" as-type="string">
      <formal-name>Attachment Format</formal-name>
      <description/>
   </define-field>
   <define-field name="date" as-type="string">
      <formal-name>Date</formal-name>
      <description/>
   </define-field>
   <define-field name="attachment-type" as-type="string">
      <formal-name>Date</formal-name>
      <description/>
   </define-field>
   <define-field name="base64" as-type="string">
      <formal-name>Date</formal-name>
      <description/>
      <flag ref="filename" as-type="string"/>
   </define-field>
   <!-- ===== FLAGS ===== -->
   <define-flag name="attachment-id" as-type="string">
      <formal-name>Attachment ID / identifier</formal-name>
      <description>Unique attachment identifier.</description>
      <remarks>
         <p>No mechanism is proposed to ensure that <code>attachment-id</code> values do not
				collide across different catalogs. Use profiling without <q>merge</q> to detect such
				clashes.</p>
      </remarks>
      <example>
         <boundary-diagram xmlns="http://csrc.nist.gov/ns/oscal/example" attachment-id="xyz2"/>
      </example>
   </define-flag>
   <define-flag name="component-id" as-type="NCName">
      <formal-name>Component ID / identifier</formal-name>
      <description>ID of a linked or imported component</description>
      <remarks>
         <p>In the context of an import statement, this identifies the id of a component to
				import, and is required.</p>
         <p>In the context of an inventory item, this identifies a component related to the
				inventory item, and is optional.</p>
         <p>A component, such as a web server, may be duplicated within the system, such as a
				cluster of web servers.</p>
         <p>The web server component is defined once, but each instance of the web server must be
				listed in the inventory. Each instance points to the same web server component.</p>
      </remarks>
      <example>
         <import xmlns="http://csrc.nist.gov/ns/oscal/example"
                 href="../vendor/components/component_file.xml">
            <include>
               <call component-id="comp02"/>
            </include>
         </import>
      </example>
   </define-flag>
   <define-flag name="control-id" as-type="NCName">
      <formal-name>Control ID / identifier</formal-name>
      <description>Pointer to a control, by its ID</description>
      <remarks>
         <p>May also address subcontrols.</p>
      </remarks>
   </define-flag>
   <define-flag name="stmt-id" as-type="NCName">
      <formal-name>Statement ID / identifier</formal-name>
      <description>Pointer to a speific requirement statement within a control.</description>
      <remarks>
         <p>May also address subcontrols.</p>
      </remarks>
   </define-flag>
   <define-flag name="nist-id" as-type="string">
      <formal-name>NIST 800-60 Information Type Identifier</formal-name>
      <description>Pointer to the information type in NIST SP 800-60.</description>
   </define-flag>
   <define-flag name="poc-id" as-type="NCName">
      <formal-name>Point of Contact ID / identifier</formal-name>
      <description>Identifies the unique identifier for an individual, title, role, or
			team.</description>
      <example>
         <asset-owner xmlns="http://csrc.nist.gov/ns/oscal/example" poc-id="xyz2"/>
      </example>
   </define-flag>
   <define-flag name="param-id" as-type="NCName">
      <formal-name>Parameter ID</formal-name>
      <description>Points to a parameter within a control, to which the contained value will be
			assigned.</description>
      <example>
         <set-param xmlns="http://csrc.nist.gov/ns/oscal/example" param-id="ac-2_prm_2">
            <value>System ISSO</value>
         </set-param>
      </example>
   </define-flag>
   <define-flag name="ref-type" as-type="string">
      <formal-name>Reference Type</formal-name>
      <description>Identifies the reference type, such as a law, standard, guidance.</description>
   </define-flag>
   <define-flag name="target" as-type="string">
      <formal-name>Target label</formal-name>
      <description>Provides for an indication of a link target, by its label, when no ID is available</description>
   </define-flag>
   <define-flag name="filename" as-type="string">
      <formal-name>File Name</formal-name>
      <description>Name of the file before it was converted to Base-64. This is the name that will be assigned to the file when converted back to binary.</description>
   </define-flag>
   <define-flag name="role-id" as-type="NCName">
      <formal-name>Role ID</formal-name>
      <description>In the context of a responsibility element, this points to a role in the users element responsible for this control</description>
      <example>
         <group xmlns="http://csrc.nist.gov/ns/oscal/example" class="family" id="ac">
            <implementation class="SP800-53 control" control-id="ac-2">
               <responsibility role-id="isso"/>
               <responsibility role-id="cloud_system_manager"/>
               <responsibility role-id="hr"/>
            </implementation>
         </group>
      </example>
   </define-flag>
   <!--<define-flag name="target" datatype="NMTOKEN" show-docs="xml json">
		<formal-name>Target Control ID</formal-name>
		<description>Identifies the control answered by this response statement.</description>
		<remarks>
			<p>I'd like to call this control-id or subcontrol-id - wap</p>
		</remarks>
		<example>
			<response xmlns="http://csrc.nist.gov/ns/oscal/example" target="ac-2_smt.g">Response to AC-2 part
				g.</response>
		</example>
	</define-flag>-->
   <define-flag name="class" as-type="NCName">
      <formal-name>Class</formal-name>
      <description>Identifies the property or object within the control; a semantic hint</description>
      <remarks>
         <p>Overloading this attribute with more than one value is permitted, but not recommended.</p>
      </remarks>
   </define-flag>
<!--   <define-flag name="context" as-type="string">
      <formal-name>Context</formal-name>
      <description>Context designates the context of information provided.</description>
      <remarks>
         <p>The @context flag indicates the component's "characteristics" and "satisfaction"
				elements.</p>
      </remarks>
      <example/>
   </define-flag>
-->   <define-flag name="name" as-type="string">
      <formal-name>Name</formal-name>
      <description>Name allows the information to be named.</description>
      <remarks>
         <p>For service information, this is the name of the service.</p>
      </remarks>
      <example/>
   </define-flag>
   <define-flag name="start" as-type="string">
      <formal-name>Start</formal-name>
      <description>Indicates the starting port number in a port range.</description>
      <remarks>
         <p>Should be a number within a permitted range</p>
      </remarks>
      <example>
         <service xmlns="http://csrc.nist.gov/ns/oscal/example"
                  id="svc-01"
                  name="Domain Name Service (DNS) Lookup">
            <protocol name="dns">
               <port-range start="53" end="53" transport="tcp"/>
            </protocol>
         </service>
      </example>
   </define-flag>
   <define-flag name="end" as-type="string">
      <formal-name>End</formal-name>
      <description>Indicates the ending port number in a port range.</description>
      <remarks>
         <p>Should be a number within a permitted range</p>
      </remarks>
      <example>
         <service xmlns="http://csrc.nist.gov/ns/oscal/example"
                  id="svc-01"
                  name="Domain Name Service (DNS) Lookup">
            <protocol name="dns">
               <port-range start="53" end="53" transport="tcp"/>
            </protocol>
         </service>
      </example>
   </define-flag>
   <define-flag name="transport" as-type="string">
      <formal-name>Transport</formal-name>
      <description>Indicates the transport type.</description>
      <example>
         <service xmlns="http://csrc.nist.gov/ns/oscal/example"
                  id="svc-01"
                  name="Domain Name Service (DNS) Lookup">
            <protocol name="dns">
               <port-range start="53" end="53" transport="tcp"/>
            </protocol>
         </service>
      </example>
   </define-flag>
   <define-flag name="type" as-type="string">
      <formal-name>Type</formal-name>
      <description>Type designates the type of information provided.</description>
      <remarks>
         <p>For information system ID, the @type flag indicates the organizaiton who issue the
				identifier.</p>
         <p>For vendor, the @type flag indicates the type of ID provided in the @id flag, such as
				a DUNS, CAGE, or similar.</p>
         <p>For ip-address, the @type flag indicates either "ipv4" or "ipv6".</p>
      </remarks>
      <example/>
   </define-flag>
   <define-flag name="public" as-type="boolean">
      <formal-name>Public</formal-name>
      <description>Designates an asset as either publicly accessible (="yes") or not
			(="no").</description>
      <example/>
   </define-flag>
   <define-flag name="virtual" as-type="boolean">
      <formal-name>Virtual</formal-name>
      <description>Designates an asset as either virtual (="yes") or physical
			(="no").</description>
      <example/>
   </define-flag>
   <define-flag name="external" as-type="boolean">
      <formal-name>external</formal-name>
      <description>.</description>
   </define-flag>
   <define-flag name="access" as-type="string">
      <formal-name>access</formal-name>
      <description>.</description>
   </define-flag>
   <define-flag name="sensitivity-level" as-type="string">
      <formal-name>sensitivity-level</formal-name>
      <description>.</description>
   </define-flag>
<!--   <define-field name="organization">
      <formal-name>organization</formal-name>
      <description>.</description>
   </define-field>
-->   <define-field name="baseline-template">
      <formal-name>baseline-template</formal-name>
      <description>.</description>
   </define-field>
   <define-field name="scanned">
      <formal-name>scanned</formal-name>
      <description>.</description>
   </define-field>
   <!--      IMPORTED METASCHEMA      -->
   <!-- The following was copied in for now, and should later be 
	referenced in its original location. 
	DO NOT MAKE CHANGES IN THE TEXT BELOW THIS COMMENT
	IT WILL BE DELETED (REPLACED WITH REFERENCES) AND LOST.
-->
   <!--  <define-assembly name="metadata">
    <formal-name>Publication metadata</formal-name>
    <description>Information describing the publication or availability of this document</description>
    <model>
      <field      named="title"    required="yes"/>
      <fields     named="author"/>
      <field      named="publication-date"/>
      <field      named="version"/>
      <fields     named="doc-id"/>
      <fields     named="prop"/>
      <assemblies named="hlink"/>
      <assemblies named="resource"/>
      <assemblies named="role"/>
      <assemblies named="party"/>
      <assembly   named="notes"/>
      <assembly   named="extra-meta"/>
    </model>
  </define-assembly>

  <define-field name="title">
    <formal-name>Title</formal-name>
    <description>The title under which this document is formally published</description>
  </define-field>

  <define-field name="author" group-as="authors">
    <formal-name>Author</formal-name>
    <description>A named author</description>
    <remarks><p>Note this information may be duplicative of information given in a <code>party</code>
    element with appropriate <code>role-id</code> flags, along with more a more complete structured
    listing. This element provides a value for display as well as an additional point of comparison.</p></remarks>
  </define-field>
  
  
  <define-field name="publication-date">
    <formal-name>Publication date</formal-name>
    <description>The official date of publication</description>
  </define-field>

  <define-field name="version">
    <flag name="iso-date"/>
    <formal-name>version</formal-name>
    <description>Version information</description>
  </define-field>
  
  <define-flag name="iso-date" datatype="date">
    <formal-name>ISO (standard) date</formal-name>
    <description>Please use YYYY-MM-DD syntax.</description>
    <remarks>
      <p>The syntax may be validated in back. The date given should presumably be the same as the
        (human-readable) <code>date</code> given above it (and such a discrepancy is also be
        detectable).</p>
    </remarks>
  </define-flag>

  <define-field name="doc-id" group-as="document-ids">
    <flag name="type"/>
    <formal-name>Document Identifier</formal-name>
    <description>Any sort of document identifier, name, code, path or other indicator of where and how this document
      may be located, compared or validated. Given appropriate qualification via its <code>type</code> and <code>rel</code>, this value may point to <q>the same</q> or <q>another version</q> of the document.</description>
    <remarks>
      <p>Flags <code>rel</code> and <code>type</code> can qualify the kind and use of document identifier, in particular whether the value is to be attributed to the given instance, or to another instance, source or resource.</p>
      <p>Specific usage rules, nomenclatures and recognized file types e.g. DOIs, CMS locators, etc
        etc., may be defined at application level. The value of this field may also be a hash or check sum.</p>
    </remarks>
  </define-field>

  <define-field name="prop" group-as="properties">
    <flag name="class"/>
    <formal-name>Property</formal-name>
    <description>A property associated with the document</description>
    <remarks><p>Wherever permitted, a <code>doc-id</code> should be used in preference to this field when the property is a document identifer of any kind.</p></remarks>
  </define-field>

  <define-assembly name="party" group-as="parties">
    <flag name="id" datatype="ID"/>
    <flag name="role-id"/>
    <formal-name>Party (organization or person)</formal-name>
    <description>A responsible entity, either singular (an organization or person) or collective (multiple persons)</description>
    <remarks>
      <p>As contents one of <code>org</code> or <code>person</code> is required, or both; there may be only one <code>org</code>, but many <code>person</code>s.</p>
      <p>Note that persons can also be indicated with organizational affiliations by using
        <code>orgname</code> inside <code>person</code>. Contact information in that
        case belongs to the person, not the organization: use <code>org</code> when an
      organization as such serves as a documented party.</p>
    </remarks>
    <model>
      <assemblies named="person"/>
      <assembly named="org"/>
      <assembly named="notes"/>
    </model>
  </define-assembly>
  
  <define-assembly name="person" group-as="persons">
    <formal-name>Person</formal-name>
    <description>A person, with contact information</description>
    <model>
      <field    named="person-name"/>
      <field    named="short-name"/>
      <field    named="org-name">
        <description>Affiliated organization</description>
      </field>
      <fields   named="person-id"/>
      <fields   named="org-id"/>
      <assembly named="address"/>
      <fields   named="email"/>
      <fields   named="phone"/>
      <fields   named="url"/>
      <assembly named="notes"/>
    </model>
  </define-assembly>
  
  <define-assembly name="org">
    <formal-name>Organization</formal-name>
    <description>An organization or legal entity (not a person), with contact information</description>
    <model>
      <field    named="org-name"/>
      <field    named="short-name"/>
      <fields   named="org-id"/>
      <assembly named="address"/>
      <fields   named="email"/>
      <fields   named="phone"/>
      <fields   named="url"/>
      <assembly named="notes"/>
    </model>
  </define-assembly>
  
  <define-field name="person-id" group-as="person-ids">
    <flag name="type"/>
    <formal-name>Personal Identifier</formal-name>
    <description>An identifier for a person (such as an ORCID) using a designated scheme.</description>
  </define-field>
  
  <define-field name="org-id" group-as="organization-ids">
    <flag name="type"/>
    <formal-name>Organization Identifier</formal-name>
    <description>An identifier for an organization using a designated scheme.</description>
  </define-field>
  
  <define-assembly name="hlink" group-as="hashed-links">
    <flag name="href" datatype="anyURI" required="yes"/>
    <flag name="rel"  datatype="NCName"/>
    <flag name="media-type"/>
    <formal-name>Hashed link</formal-name>
    <description>A pointer to an external document with optional hash for verification</description>
    <remarks>
      <p>This is different from unstructured <code>link</code>, which makes no provision for a hash or formal title. It is also different from the element of the same name once proposed for HTML.</p>
    </remarks>
    <model>
      <field  named="title"/>
      <fields named="hash"/>
    </model>
  </define-assembly>
  
  <define-flag name="rel" datatype="NCName">
    <formal-name>Relation</formal-name>
    <description>Purpose of the link</description>
  </define-flag>
  
  <define-flag name="media-type" datatype="string">
    <formal-name>Media type</formal-name>
    <description>Describes the media or MIME type of a linked resource</description>
  </define-flag>
  
  <define-field name="person-name">
    <formal-name>Person Name</formal-name>
    <description>Full (legal) name of an individual</description>
  </define-field>
  
  <define-field name="org-name">
    <formal-name>Organization Name</formal-name>
    <description>Full (legal) name of an organization</description>
    <remarks>
      <p>Only when this element is used directly within <code>org</code> can it be accepted of the name of the thing to which it is attached. This element may also be used directly on <code>person</code> to name an affiliated organization.</p>
      <p><code>href</code> can be used to provide external links or internal links to other elements. The sibling <code>org-id</code> element
        (similarly for <em>affiliated</em> organizations) can also be used to link (for example to organizations listed elsewhere as parties.)</p>
    </remarks>
  </define-field>
  
  <define-field name="short-name">
    <formal-name>short-name</formal-name>
    <description>A common name, short name or acronym</description>
    <remarks>
      <p>This element is not expected to be used to identify individual persons, but rather an
        organization or system.</p>
    </remarks>
  </define-field>

  <define-assembly name="address">
    <formal-name>Address</formal-name>
    <description>A postal address</description>
    <model>
      <fields named="addr-line"/>
      <field  named="city"/>
      <field  named="state"/>
      <field  named="postal-code"/>
      <field  named="country"/>
      <!-\- More address stuff -\->
    </model>
  </define-assembly>


  <define-field name="addr-line" group-as="postal-address">
    <formal-name>Address line</formal-name>
    <description>A single line of an address</description>
  </define-field>

  <define-field name="city">
    <formal-name>City</formal-name>
    <description>City, town or geographical region for mailing address</description>
  </define-field>

  <define-field name="state">
    <formal-name>State</formal-name>
    <description>State, province or analogous geographical region for mailing address</description>
  </define-field>

  <define-field name="postal-code">
    <formal-name>Postal Code</formal-name>
    <description>Postal or ZIP code for mailing address</description>
  </define-field>

  <define-field name="country">
    <formal-name>Country</formal-name>
    <description>Country for mailing address</description>
  </define-field>

  <define-field name="email" group-as="email-addresses">
    <formal-name>Email</formal-name>
    <description>Email address</description>
  </define-field>

  <define-field name="phone" group-as="telephone-numbers">
    <formal-name>Telephone</formal-name>
    <description>Contact number by telephone</description>
  </define-field>

  <define-field name="url" group-as="URLs">
    <formal-name>URL</formal-name>
    <description>URL for web site or Internet presence</description>
  </define-field>

  <define-assembly name="notes">
    <formal-name>Notes</formal-name>
    <description>Any notes with further information</description>
    <model>
      <prose/>
    </model>
  </define-assembly>

  <define-field name="desc">
    <formal-name>Description</formal-name>
    <description>A short description</description>
  </define-field>
  
  <define-assembly name="resource" group-as="resources">
    <flag name="type"/>
    <flag name="media-type"/>
    <formal-name>Resource</formal-name>
    <description>A resource to inform or authenticate the present document.</description>
    <remarks>
      <p>Typically this information item describes and points to a mirror or other (authoritative or
        informative) copy of a document, or of a resource helpful (necessary) for interpreting it,
        such as its metaschema or documentation. It may offer a (persistent) link to a
        <q>best available</q> version, or to an outdated version, as indicated by its
        <code>rel</code>.</p>
    </remarks>
    <model>
      <field    named="title"/>
      <fields   named="author"/>
      <field    named="publication-date"/>
      <field    named="version"/>
      <fields   named="doc-id"/>
      <fields   named="prop"/>
      <assemblies named="hlink"/>
      <assembly named="notes"/>
    </model>
  </define-assembly>

  <define-field name="hash" group-as="hashes">
    <flag name="algorithm"/>
    <formal-name>Hash</formal-name>
    <description>A document hash or other value subject to cryptographic authentication</description>
    <remarks>
      <p>When appearing as part of a resource (data object), the hash should apply to the referenced object.</p>
    </remarks>
  </define-field>
  
  
  <define-flag name="algorithm" datatype="string">
    <formal-name>Hash algorithm</formal-name>
    <description>Method by which a hash is derived</description>
    <remarks><p>One of the following is recognized: MD5, SHA-1, SHA-224, SHA-256, SHA-384, SHA-512, RIPEMD-160. See <a href="https://www.w3.org/TR/xmlsec-algorithms/#digest-method">XML Security Algorithm Cross-Reference</a> (W3C, April 2013) for more information.</p></remarks>
  </define-flag>-->
   <!-- previously removed
	<define-assembly name="role" group-as="roles">
    <flag name="id" datatype="ID" required="yes"/>
    <formal-name>Role</formal-name>
    <description>Defining a role to be assigned to a party or agent</description>
    <remarks>
      <p>Permissible values to be determined closer to the application (e.g. by a receiving
        authority).</p>
    </remarks>
    <model>
      <field named="title"/>
      <field named="short-name"/>
      <field named="desc"/>
    </model>
  </define-assembly>
 -->
   <!--  <define-flag name="href" datatype="anyURI">
    <formal-name>Hypertext reference</formal-name>
    <description>A relative or absolute URI indicating a resource available on the Internet.</description>
  </define-flag>

  <define-assembly name="extra-meta">
    <formal-name>Extra metadata</formal-name>
    <description>Container for (system-defined) metadata</description>
    <model>
      <choice>
        <assemblies named="meta-group"/>
        <fields named="meta"/>
      </choice>
      <assembly named="notes"/>
    </model>
  </define-assembly>
  
  <define-assembly name="meta-group" group-as="metadata-groups">
    <flag name="term"/>
    <flag name="type"/>
    <formal-name>Metadata group</formal-name>
    <description>Custom- or application-defined annotated metadata.</description>
    <model>
      <fields     named="meta"/>
      <assemblies named="meta-group"/>
      <assembly   named="notes"/>
    </model>
  </define-assembly>
  
  <define-field name="meta" group-as="metadata-fields">
    <flag name="term"/>
    <flag name="type"/>
    <formal-name>Metadata field value</formal-name>
    <description>Any customized or specialized metadata value.</description>
  </define-field>
  
  <define-flag name="term" datatype="string">
    <formal-name>Metadata term</formal-name>
    <description>A classification (according to any schema or taxonomy) of a metadata value or set of values.</description>
  </define-flag>
-->
   <!--      BORROWED FROM PROFILE METASCHEMA AND MODIFIED    -->
   <!-- The following needs discussion/attention. It may not be the final solution. -->
   <!--	<define-assembly name="import" group-as="imports">
		<flag name="href" datatype="anyURI" required="yes"/>
		<formal-name>Import resource</formal-name>
		<description>Makes information from an external component file available to this component
			file.</description>
		<remarks>
			<p>This is typically used when defining components of type="capability", to identify the
				individual components the form the larger capabiity.</p>
			<p>This is also used for definining provision information, involving components from
				multiple sources. </p>
		</remarks>
		<model>
			<assembly named="include"/>
			<!-\- assembly named="exclude"/ -\->
		</model>
		<example>
			<import href="../vendor/components/component_file.xml" xmlns="http://csrc.nist.gov/ns/oscal/example">
				<include>
					<call component-id="comp02"/>
				</include>
			</import>
		</example>
	</define-assembly>

	<define-assembly name="include" group-as="includes">
		<formal-name>Include controls</formal-name>
		<description>Specifies which controls and subcontrols to include from the resource (source catalog) being
			imported</description>
		<remarks>
			<p>To be schema-valid, this element must contain either (but not both) a single
				<code>all</code> element, or a sequence of <code>call</code> elements.</p>
			<p>If this element is not given, it is assumed to be present with contents <code>all</code>
				(qv); i.e., all controls are included by default, unless the <code>include</code>
				instruction calls controls specifically.</p>
		</remarks>
		<model>
			<choice>
				<field named="all"/>
				<fields named="call"/>
				<!-\- assemblies named="match" group-as="pattern-selectors"/-\->
			</choice>
		</model>
	</define-assembly>
	
	<define-field name="all" as="empty">
		<flag name="with-subcontrols"/>
		<formal-name>Include all</formal-name>
		<description>Include all controls from the imported resource (catalog)</description>
		<remarks>
			<p>This element provides an alternative to calling controls and subcontrols individually
				from a catalog. But this is also the default behavior when no <code>include</code>
				element is given in an <code>import</code>; so ordinarily one might not see this element
				unless it is for purposes of including its <code>@with-subcontrols='yes'</code>
			</p>
		</remarks>
	</define-field>
	
	<define-field name="call" group-as="calls" as="string">
		<flag name="component-id" datatype="NMTOKEN"/>
		<formal-name>Call</formal-name>
		<description>The call element imports the component definition identified by the
			@component-id attribute in the external component file.</description>
		<remarks>
			<p>This is typically used when defining components of type="capability", to identify the
				individual components the form the larger capabiity.</p>
			<p>This is also used for definining provision information, involving components from
				multiple sources. </p>
		</remarks>
		<example>
			<import href="../vendor/components/component_file.xml" xmlns="http://csrc.nist.gov/ns/oscal/example">
				<include>
					<call component-id="comp02"/>
				</include>
			</import>
		</example>
	</define-field>
	
	<define-flag datatype="NCName" name="with-subcontrols">
		<formal-name>Include subcontrols with control</formal-name>
		<description>Whether subcontrols should be implicitly included, if not called.</description>
	</define-flag>
-->
   <define-field name="prose" as-type="markup-multiline">
      <formal-name>Prose</formal-name>
      <description>Prose permits multiple paragraphs, lists, tables etc.</description>
   </define-field>
</METASCHEMA>
